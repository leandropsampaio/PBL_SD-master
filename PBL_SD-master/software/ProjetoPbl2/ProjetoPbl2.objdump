
ProjetoPbl2.elf:     file format elf32-littlenios2
ProjetoPbl2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001890 memsz 0x00001890 flags r-x
    LOAD off    0x000028b0 vaddr 0x000098b0 paddr 0x000099a8 align 2**12
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x00002aa0 vaddr 0x00009aa0 paddr 0x00009aa0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000016bc  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  000096dc  000096dc  000026dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f8  000098b0  000099a8  000028b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00009aa0  00009aa0  00002aa0  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  000029d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005b65  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001aa9  00000000  00000000  0000886d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000020f1  00000000  00000000  0000a316  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000053c  00000000  00000000  0000c408  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001144  00000000  00000000  0000c944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001e92  00000000  00000000  0000da88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000040  00000000  00000000  0000f91c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000220  00000000  00000000  0000f960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00010e31  2**0
                  CONTENTS, READONLY
 16 .cpu          00000004  00000000  00000000  00010e34  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00010e38  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00010e39  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  00010e3a  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  00010e45  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  00010e50  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000004  00000000  00000000  00010e5b  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000032  00000000  00000000  00010e5f  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00065ec0  00000000  00000000  00010e91  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
000096dc l    d  .rodata	00000000 .rodata
000098b0 l    d  .rwdata	00000000 .rwdata
00009aa0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ProjetoPbl2_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000098b0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000092f8 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 
000088c0 g     F .text	0000001c putchar
00009554 g     F .text	0000002c alt_main
000088dc g     F .text	00000080 _puts_r
000099a8 g       *ABS*	00000000 __flash_rwdata_start
0000886c g     F .text	0000004c printf
00008440 g     F .text	000000c4 initConnection
00008144 g     F .text	00000070 read_uart
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000081b4 g     F .text	00000068 acenderLeds
00009aa0 g     O .bss	00000004 errno
00009aa8 g     O .bss	00000004 alt_argv
00011990 g       *ABS*	00000000 _gp
00009580 g     F .text	00000004 usleep
000083f4 g     F .text	0000004c tcpConnection
000088b8 g     F .text	00000008 _putchar_r
000083a8 g     F .text	0000004c networkConnection
00008808 g     F .text	00000028 memcpy
0000895c g     F .text	00000014 puts
00008830 g     F .text	0000003c _printf_r
00009418 g     F .text	00000008 __udivsi3
00008370 g     F .text	00000038 atTest
0000999c g     O .rwdata	00000004 UART_1
00009994 g     O .rwdata	00000004 _global_impure_ptr
00009ab0 g       *ABS*	00000000 __bss_end
000096cc g     F .text	00000004 alt_dcache_flush_all
000099a8 g       *ABS*	00000000 __ram_rwdata_end
00009584 g     F .text	00000068 write
0000922c g     F .text	00000060 _putc_r
000098b0 g       *ABS*	00000000 __ram_rodata_end
000099a0 g     O .rwdata	00000004 jtag_uart_0
00009420 g     F .text	00000008 __umodsi3
00009ab0 g       *ABS*	00000000 end
0000821c g     F .text	00000094 printalcd
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009610 g     F .text	00000034 altera_avalon_jtag_uart_write
00008998 g     F .text	00000734 ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
0000960c g     F .text	00000004 alt_sys_init
00009428 g     F .text	00000028 __mulsi3
000098b0 g       *ABS*	00000000 __ram_rwdata_start
000096dc g       *ABS*	00000000 __ram_rodata_start
00008108 g     F .text	0000003c write_uart_quick
0000805c g     F .text	000000ac write_uart
00009644 g     F .text	00000088 alt_busy_sleep
00009990 g     O .rwdata	00000001 button_value
00009ab0 g       *ABS*	00000000 __alt_stack_base
000090f0 g     F .text	000000e0 __sfvwrite_small_dev
00009aa0 g       *ABS*	00000000 __bss_start
000082b0 g     F .text	000000c0 lcd_init
00008610 g     F .text	000001f8 main
00009aa4 g     O .bss	00000004 alt_envp
000099a4 g     O .rwdata	00000004 alt_errno
00008504 g     F .text	0000010c sendPublish
000091d0 g     F .text	0000005c putc
0000936c g     F .text	00000050 __divsi3
000096dc g       *ABS*	00000000 __flash_rodata_start
000095ec g     F .text	00000020 alt_irq_init
0000928c g     F .text	0000006c _write_r
00009998 g     O .rwdata	00000004 _impure_ptr
00009aac g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
000099a8 g       *ABS*	00000000 _edata
00009ab0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_mem_memory
000096d4 g     F .text	00000008 altera_nios2_qsys_irq_init
000093bc g     F .text	0000005c __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008970 g     F .text	00000028 strlen
000096d0 g     F .text	00000004 alt_icache_flush_all
000090cc g     F .text	00000024 __vfprintf_internal
00009450 g     F .text	00000104 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6866414 	ori	gp,gp,6544
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a6a814 	ori	r2,r2,39584

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e6ac14 	ori	r3,r3,39600

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00094500 	call	9450 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00095540 	call	9554 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <write_uart>:

/*
 * Função para enviar os caracteres através o TX (transmissor)
 * */
void write_uart(int tamanho, char *comando)
{
    805c:	defffa04 	addi	sp,sp,-24
    8060:	dcc00315 	stw	r19,12(sp)
    8064:	dc800215 	stw	r18,8(sp)
    8068:	dfc00515 	stw	ra,20(sp)
    806c:	dd000415 	stw	r20,16(sp)
    8070:	dc400115 	stw	r17,4(sp)
    8074:	dc000015 	stw	r16,0(sp)
    8078:	2027883a 	mov	r19,r4
    807c:	2825883a 	mov	r18,r5
	int i;
    unsigned long status = 0;
    8080:	0005883a 	mov	r2,zero

    // Verifica até que seja possível a transmissão de dados
    while((status & 0x00000040) != 0x00000040)
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    8084:	00c00074 	movhi	r3,1
    8088:	18c40204 	addi	r3,r3,4104
{
	int i;
    unsigned long status = 0;

    // Verifica até que seja possível a transmissão de dados
    while((status & 0x00000040) != 0x00000040)
    808c:	00000106 	br	8094 <write_uart+0x38>
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    8090:	18800037 	ldwio	r2,0(r3)
{
	int i;
    unsigned long status = 0;

    // Verifica até que seja possível a transmissão de dados
    while((status & 0x00000040) != 0x00000040)
    8094:	1080100c 	andi	r2,r2,64
    8098:	103ffd26 	beq	r2,zero,8090 <write_uart+0x34>
    809c:	9021883a 	mov	r16,r18
    80a0:	05000074 	movhi	r20,1
    80a4:	a5040104 	addi	r20,r20,4100
    80a8:	00000506 	br	80c0 <write_uart+0x64>
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    }

    for (i = 0; i < tamanho; i++) {
    	IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, comando[i]);
    80ac:	80800007 	ldb	r2,0(r16)
    80b0:	a0800035 	stwio	r2,0(r20)
    	usleep(1000);
    80b4:	0100fa04 	movi	r4,1000
    80b8:	00095800 	call	9580 <usleep>
    80bc:	84000044 	addi	r16,r16,1
#define DOWN_BUTTON 2

/*
 * Função para enviar os caracteres através o TX (transmissor)
 * */
void write_uart(int tamanho, char *comando)
    80c0:	8485c83a 	sub	r2,r16,r18
    80c4:	04400074 	movhi	r17,1
    80c8:	8c440104 	addi	r17,r17,4100
    while((status & 0x00000040) != 0x00000040)
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    }

    for (i = 0; i < tamanho; i++) {
    80cc:	14fff716 	blt	r2,r19,80ac <write_uart+0x50>
    	IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, comando[i]);
    	usleep(1000);
    }
    IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, '\r');
    80d0:	00800344 	movi	r2,13
    80d4:	88800035 	stwio	r2,0(r17)
    usleep(1000);
    80d8:	0100fa04 	movi	r4,1000
    80dc:	00095800 	call	9580 <usleep>
    IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, '\n');
    80e0:	00800284 	movi	r2,10
    80e4:	88800035 	stwio	r2,0(r17)

}
    80e8:	dfc00517 	ldw	ra,20(sp)
    80ec:	dd000417 	ldw	r20,16(sp)
    80f0:	dcc00317 	ldw	r19,12(sp)
    80f4:	dc800217 	ldw	r18,8(sp)
    80f8:	dc400117 	ldw	r17,4(sp)
    80fc:	dc000017 	ldw	r16,0(sp)
    8100:	dec00604 	addi	sp,sp,24
    8104:	f800283a 	ret

00008108 <write_uart_quick>:
 * Função para enviar os caracteres através o TX (transmissor)
 * */
void write_uart_quick(char comando)
{
	int i;
	unsigned long status = 0;
    8108:	0005883a 	mov	r2,zero
	//printf("COMANDO: %c", comando);

    // Verifica até que seja possível a transmissão de dados
    while((status & 0x00000040) != 0x00000040)
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    810c:	00c00074 	movhi	r3,1
    8110:	18c40204 	addi	r3,r3,4104
	int i;
	unsigned long status = 0;
	//printf("COMANDO: %c", comando);

    // Verifica até que seja possível a transmissão de dados
    while((status & 0x00000040) != 0x00000040)
    8114:	00000106 	br	811c <write_uart_quick+0x14>
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    8118:	18800037 	ldwio	r2,0(r3)
	int i;
	unsigned long status = 0;
	//printf("COMANDO: %c", comando);

    // Verifica até que seja possível a transmissão de dados
    while((status & 0x00000040) != 0x00000040)
    811c:	1080100c 	andi	r2,r2,64
    8120:	103ffd26 	beq	r2,zero,8118 <write_uart_quick+0x10>
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    }

	IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, comando);
    8124:	21003fcc 	andi	r4,r4,255
    8128:	2100201c 	xori	r4,r4,128
    812c:	213fe004 	addi	r4,r4,-128
    8130:	00800074 	movhi	r2,1
    8134:	10840104 	addi	r2,r2,4100
    8138:	11000035 	stwio	r4,0(r2)
	usleep(1000);
    813c:	0100fa04 	movi	r4,1000
    8140:	00095801 	jmpi	9580 <usleep>

00008144 <read_uart>:

/*
 * Função para receber os caracteres através o rx (receptor)
 * */
char read_uart()
{
    8144:	defffb04 	addi	sp,sp,-20
    8148:	dcc00315 	stw	r19,12(sp)
    814c:	dc800215 	stw	r18,8(sp)
    8150:	dc400115 	stw	r17,4(sp)
    8154:	dfc00415 	stw	ra,16(sp)
    8158:	dc000015 	stw	r16,0(sp)
	char data;

	while(1){
    	// Verifica se possui dados para serem lidos
    	if(IORD_ALTERA_AVALON_UART_STATUS( UART_1_BASE ) & 0x80 ) {
    815c:	04c00074 	movhi	r19,1
    8160:	9cc40204 	addi	r19,r19,4104
    		data = IORD_ALTERA_AVALON_UART_RXDATA( UART_1_BASE );
    8164:	04800074 	movhi	r18,1
    8168:	94840004 	addi	r18,r18,4096
	        printf("%c",data);

	        if(data == 'K'){
    816c:	044012c4 	movi	r17,75
{
	char data;

	while(1){
    	// Verifica se possui dados para serem lidos
    	if(IORD_ALTERA_AVALON_UART_STATUS( UART_1_BASE ) & 0x80 ) {
    8170:	98800037 	ldwio	r2,0(r19)
    8174:	1080200c 	andi	r2,r2,128
    8178:	103ffd26 	beq	r2,zero,8170 <read_uart+0x2c>
    		data = IORD_ALTERA_AVALON_UART_RXDATA( UART_1_BASE );
    817c:	94000037 	ldwio	r16,0(r18)
	        printf("%c",data);
    8180:	84003fcc 	andi	r16,r16,255
    8184:	8400201c 	xori	r16,r16,128
    8188:	843fe004 	addi	r16,r16,-128
    818c:	8009883a 	mov	r4,r16
    8190:	00088c00 	call	88c0 <putchar>

	        if(data == 'K'){
    8194:	847ff61e 	bne	r16,r17,8170 <read_uart+0x2c>
	        	break;
	        }
    	}
	}
}
    8198:	dfc00417 	ldw	ra,16(sp)
    819c:	dcc00317 	ldw	r19,12(sp)
    81a0:	dc800217 	ldw	r18,8(sp)
    81a4:	dc400117 	ldw	r17,4(sp)
    81a8:	dc000017 	ldw	r16,0(sp)
    81ac:	dec00504 	addi	sp,sp,20
    81b0:	f800283a 	ret

000081b4 <acenderLeds>:

/*
 * Função para selecionar (acender) o LED corretamente através da opção
 */
void acenderLeds(int opcao, int nivelLogico) {
	if (opcao == 1) {
    81b4:	00800044 	movi	r2,1
    81b8:	2080031e 	bne	r4,r2,81c8 <acenderLeds+0x14>
		IOWR_ALTERA_AVALON_PIO_DATA(LED1_BASE, nivelLogico);
    81bc:	00800074 	movhi	r2,1
    81c0:	10842804 	addi	r2,r2,4256
    81c4:	00001306 	br	8214 <acenderLeds+0x60>
	} else if (opcao == 2) {
    81c8:	00800084 	movi	r2,2
    81cc:	2080031e 	bne	r4,r2,81dc <acenderLeds+0x28>
		IOWR_ALTERA_AVALON_PIO_DATA(LED2_BASE, nivelLogico);
    81d0:	00800074 	movhi	r2,1
    81d4:	10842004 	addi	r2,r2,4224
    81d8:	00000e06 	br	8214 <acenderLeds+0x60>
	} else if (opcao == 3) {
    81dc:	008000c4 	movi	r2,3
    81e0:	2080031e 	bne	r4,r2,81f0 <acenderLeds+0x3c>
		IOWR_ALTERA_AVALON_PIO_DATA(LED3_BASE, nivelLogico);
    81e4:	00800074 	movhi	r2,1
    81e8:	10841c04 	addi	r2,r2,4208
    81ec:	00000906 	br	8214 <acenderLeds+0x60>
	} else if (opcao == 4) {
    81f0:	00800104 	movi	r2,4
    81f4:	2080031e 	bne	r4,r2,8204 <acenderLeds+0x50>
		IOWR_ALTERA_AVALON_PIO_DATA(LED4_BASE, nivelLogico);
    81f8:	00800074 	movhi	r2,1
    81fc:	10841804 	addi	r2,r2,4192
    8200:	00000406 	br	8214 <acenderLeds+0x60>
	} else if (opcao == 5) {
    8204:	00800144 	movi	r2,5
    8208:	2080031e 	bne	r4,r2,8218 <acenderLeds+0x64>
		IOWR_ALTERA_AVALON_PIO_DATA(LED5_BASE, nivelLogico);
    820c:	00800074 	movhi	r2,1
    8210:	10841404 	addi	r2,r2,4176
    8214:	11400035 	stwio	r5,0(r2)
    8218:	f800283a 	ret

0000821c <printalcd>:
}

/*
 * Função para escrever palavras no LCD
 */
void printalcd(char word[][16], int lugar) {
    821c:	defffb04 	addi	sp,sp,-20
    8220:	dc800215 	stw	r18,8(sp)
    8224:	dc400115 	stw	r17,4(sp)
    8228:	2025883a 	mov	r18,r4
    822c:	2823883a 	mov	r17,r5

	int i;
	lugar = lugar - 1;

	/* Set the Cursor to the home position */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
    8230:	00800084 	movi	r2,2
}

/*
 * Função para escrever palavras no LCD
 */
void printalcd(char word[][16], int lugar) {
    8234:	dfc00415 	stw	ra,16(sp)
    8238:	dcc00315 	stw	r19,12(sp)
    823c:	dc000015 	stw	r16,0(sp)

	int i;
	lugar = lugar - 1;

	/* Set the Cursor to the home position */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
    8240:	0085c032 	custom	0,r2,zero,r2
	usleep(2000);
    8244:	0101f404 	movi	r4,2000
    8248:	00095800 	call	9580 <usleep>

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
    824c:	04c00044 	movi	r19,1
    8250:	04c5c032 	custom	0,r2,zero,r19
 * Função para escrever palavras no LCD
 */
void printalcd(char word[][16], int lugar) {

	int i;
	lugar = lugar - 1;
    8254:	8c7fffc4 	addi	r17,r17,-1
	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);

	for (i = 0; i < strlen(word); i++) {
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
    8258:	8822913a 	slli	r17,r17,4
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
	usleep(2000);

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);
    825c:	0101f404 	movi	r4,2000
    8260:	00095800 	call	9580 <usleep>

	for (i = 0; i < strlen(word); i++) {
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
    8264:	9463883a 	add	r17,r18,r17

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);

	for (i = 0; i < strlen(word); i++) {
    8268:	8821883a 	mov	r16,r17
    826c:	00000506 	br	8284 <printalcd+0x68>
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
    8270:	80800007 	ldb	r2,0(r16)
    8274:	9885c032 	custom	0,r2,r19,r2
		usleep(100);
    8278:	01001904 	movi	r4,100
    827c:	00095800 	call	9580 <usleep>
    8280:	84000044 	addi	r16,r16,1

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);

	for (i = 0; i < strlen(word); i++) {
    8284:	9009883a 	mov	r4,r18
    8288:	00089700 	call	8970 <strlen>
}

/*
 * Função para escrever palavras no LCD
 */
void printalcd(char word[][16], int lugar) {
    828c:	8447c83a 	sub	r3,r16,r17

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);

	for (i = 0; i < strlen(word); i++) {
    8290:	18bff736 	bltu	r3,r2,8270 <printalcd+0x54>
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
		usleep(100);
	}
}
    8294:	dfc00417 	ldw	ra,16(sp)
    8298:	dcc00317 	ldw	r19,12(sp)
    829c:	dc800217 	ldw	r18,8(sp)
    82a0:	dc400117 	ldw	r17,4(sp)
    82a4:	dc000017 	ldw	r16,0(sp)
    82a8:	dec00504 	addi	sp,sp,20
    82ac:	f800283a 	ret

000082b0 <lcd_init>:

/*
 * Função para inicializar o LCD
 */
void lcd_init(void) {
    82b0:	defffc04 	addi	sp,sp,-16
	usleep(15000); /* Wait for more than 15 ms before init */
    82b4:	010ea604 	movi	r4,15000
}

/*
 * Função para inicializar o LCD
 */
void lcd_init(void) {
    82b8:	dc800215 	stw	r18,8(sp)
    82bc:	dc000015 	stw	r16,0(sp)
    82c0:	dfc00315 	stw	ra,12(sp)
    82c4:	dc400115 	stw	r17,4(sp)
	usleep(15000); /* Wait for more than 15 ms before init */
	/* Set function code four times -- 8-bit, 2 line, 5x7 mode */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    82c8:	0021883a 	mov	r16,zero

/*
 * Função para inicializar o LCD
 */
void lcd_init(void) {
	usleep(15000); /* Wait for more than 15 ms before init */
    82cc:	00095800 	call	9580 <usleep>
	/* Set function code four times -- 8-bit, 2 line, 5x7 mode */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    82d0:	04800e04 	movi	r18,56
    82d4:	8485c032 	custom	0,r2,r16,r18
	usleep(4100); /* Wait for more than 4.1 ms */
    82d8:	01040104 	movi	r4,4100
    82dc:	00095800 	call	9580 <usleep>
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    82e0:	8485c032 	custom	0,r2,r16,r18
	usleep(100); /* Wait for more than 100 us */
    82e4:	04401904 	movi	r17,100
    82e8:	8809883a 	mov	r4,r17
    82ec:	00095800 	call	9580 <usleep>
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    82f0:	8485c032 	custom	0,r2,r16,r18
	usleep(5000); /* Wait for more than 100 us */
    82f4:	0104e204 	movi	r4,5000
    82f8:	00095800 	call	9580 <usleep>
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    82fc:	84a5c032 	custom	0,r18,r16,r18
	usleep(100); /* Wait for more than 100 us */
    8300:	8809883a 	mov	r4,r17
    8304:	00095800 	call	9580 <usleep>

	/* Set Display to OFF*/
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x08);
    8308:	00800204 	movi	r2,8
    830c:	8085c032 	custom	0,r2,r16,r2
	usleep(100);
    8310:	8809883a 	mov	r4,r17
    8314:	00095800 	call	9580 <usleep>

	/* Set Display to ON */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x0C);
    8318:	00800304 	movi	r2,12
    831c:	8085c032 	custom	0,r2,r16,r2
	usleep(100);
    8320:	8809883a 	mov	r4,r17
    8324:	00095800 	call	9580 <usleep>

	/* Set Entry Mode -- Cursor increment, display doesn't shift */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x06);
    8328:	00800184 	movi	r2,6
    832c:	8085c032 	custom	0,r2,r16,r2
	usleep(100);
    8330:	8809883a 	mov	r4,r17
    8334:	00095800 	call	9580 <usleep>

	/* Set the Cursor to the home position */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
    8338:	00800084 	movi	r2,2
    833c:	8085c032 	custom	0,r2,r16,r2
	usleep(2000);
    8340:	0441f404 	movi	r17,2000
    8344:	8809883a 	mov	r4,r17
    8348:	00095800 	call	9580 <usleep>

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
    834c:	00800044 	movi	r2,1
    8350:	80a1c032 	custom	0,r16,r16,r2
	usleep(2000);
    8354:	8809883a 	mov	r4,r17
}
    8358:	dfc00317 	ldw	ra,12(sp)
    835c:	dc800217 	ldw	r18,8(sp)
    8360:	dc400117 	ldw	r17,4(sp)
    8364:	dc000017 	ldw	r16,0(sp)
    8368:	dec00404 	addi	sp,sp,16
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
	usleep(2000);

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);
    836c:	00095801 	jmpi	9580 <usleep>

00008370 <atTest>:
}

void atTest(){
    8370:	defffe04 	addi	sp,sp,-8
	// AT TESTE
	int z;
	char comando[] = "AT";
	write_uart(strlen(comando), comando);
    8374:	d809883a 	mov	r4,sp
}

void atTest(){
	// AT TESTE
	int z;
	char comando[] = "AT";
    8378:	00951044 	movi	r2,21569
	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);
}

void atTest(){
    837c:	dfc00115 	stw	ra,4(sp)
	// AT TESTE
	int z;
	char comando[] = "AT";
    8380:	d880000d 	sth	r2,0(sp)
    8384:	d8000085 	stb	zero,2(sp)
	write_uart(strlen(comando), comando);
    8388:	00089700 	call	8970 <strlen>
    838c:	1009883a 	mov	r4,r2
    8390:	d80b883a 	mov	r5,sp
    8394:	000805c0 	call	805c <write_uart>
	read_uart();
    8398:	00081440 	call	8144 <read_uart>
}
    839c:	dfc00117 	ldw	ra,4(sp)
    83a0:	dec00204 	addi	sp,sp,8
    83a4:	f800283a 	ret

000083a8 <networkConnection>:

void networkConnection(){
    83a8:	defff504 	addi	sp,sp,-44
	char cmd[] = "AT+CWJAP=\"WLessLEDS\",\"HelloWorldMP31\"";
    83ac:	01800984 	movi	r6,38
    83b0:	d809883a 	mov	r4,sp
    83b4:	01400074 	movhi	r5,1
    83b8:	2965bc04 	addi	r5,r5,-26896
	char comando[] = "AT";
	write_uart(strlen(comando), comando);
	read_uart();
}

void networkConnection(){
    83bc:	dfc00a15 	stw	ra,40(sp)
	char cmd[] = "AT+CWJAP=\"WLessLEDS\",\"HelloWorldMP31\"";
    83c0:	00088080 	call	8808 <memcpy>
	//char cmd[] = "AT+CWJAP=\"IEEE_UEFS\",\"ramoIEEEUEFS\"";
	//char cmd[] = "AT+CWJAP=\"Gilberto WiFi\",\"20152015\"";
	write_uart(strlen(cmd), cmd);
    83c4:	d809883a 	mov	r4,sp
    83c8:	00089700 	call	8970 <strlen>
    83cc:	d80b883a 	mov	r5,sp
    83d0:	1009883a 	mov	r4,r2
    83d4:	000805c0 	call	805c <write_uart>
	read_uart();
    83d8:	00081440 	call	8144 <read_uart>

	printf("CONECTOU A REDE!");
    83dc:	01000074 	movhi	r4,1
    83e0:	2125b704 	addi	r4,r4,-26916
    83e4:	000886c0 	call	886c <printf>
}
    83e8:	dfc00a17 	ldw	ra,40(sp)
    83ec:	dec00b04 	addi	sp,sp,44
    83f0:	f800283a 	ret

000083f4 <tcpConnection>:

void tcpConnection(){
    83f4:	defff504 	addi	sp,sp,-44
	// Iniciando a conexão TCP
	char cmd2[] = "AT+CIPSTART=\"TCP\",\"192.168.1.103\",1883";
    83f8:	018009c4 	movi	r6,39
    83fc:	d809883a 	mov	r4,sp
    8400:	01400074 	movhi	r5,1
    8404:	2965ca04 	addi	r5,r5,-26840
	read_uart();

	printf("CONECTOU A REDE!");
}

void tcpConnection(){
    8408:	dfc00a15 	stw	ra,40(sp)
	// Iniciando a conexão TCP
	char cmd2[] = "AT+CIPSTART=\"TCP\",\"192.168.1.103\",1883";
    840c:	00088080 	call	8808 <memcpy>
	//char cmd2[] = "AT+CIPSTART=\"TCP\",\"test.mosquitto.org\",1883";
	write_uart(strlen(cmd2), cmd2);
    8410:	d809883a 	mov	r4,sp
    8414:	00089700 	call	8970 <strlen>
    8418:	d80b883a 	mov	r5,sp
    841c:	1009883a 	mov	r4,r2
    8420:	000805c0 	call	805c <write_uart>
	read_uart();
    8424:	00081440 	call	8144 <read_uart>

	printf("CONEXAO TCP OK!");
    8428:	01000074 	movhi	r4,1
    842c:	2125c604 	addi	r4,r4,-26856
    8430:	000886c0 	call	886c <printf>
}
    8434:	dfc00a17 	ldw	ra,40(sp)
    8438:	dec00b04 	addi	sp,sp,44
    843c:	f800283a 	ret

00008440 <initConnection>:

void initConnection(){
    8440:	defff304 	addi	sp,sp,-52
		Flags = 0x02 (2)
		Keep Alive = 0x00, 0x14 (20)
		Tamanho do ID do cliente = 0x00, 0x05 (5)
		ID do cliente = 0x4E, 0x69, 0x6F, 0x73, 0x35 (Nios2)
	*/
	char connect[] = {0x10, 0x11, 0x00, 0x04, 0x4D, 0x51,
    8444:	d809883a 	mov	r4,sp
    8448:	01400074 	movhi	r5,1
    844c:	2965edc4 	addi	r5,r5,-26697
    8450:	018004c4 	movi	r6,19
	read_uart();

	printf("CONEXAO TCP OK!");
}

void initConnection(){
    8454:	dfc00c15 	stw	ra,48(sp)
    8458:	dc800b15 	stw	r18,44(sp)
    845c:	dc000915 	stw	r16,36(sp)
    8460:	dc400a15 	stw	r17,40(sp)
		Flags = 0x02 (2)
		Keep Alive = 0x00, 0x14 (20)
		Tamanho do ID do cliente = 0x00, 0x05 (5)
		ID do cliente = 0x4E, 0x69, 0x6F, 0x73, 0x35 (Nios2)
	*/
	char connect[] = {0x10, 0x11, 0x00, 0x04, 0x4D, 0x51,
    8464:	00088080 	call	8808 <memcpy>
			0x54, 0x54, 0x04, 0x02, 0x00, 0x64, 0x00, 0x05,
			0x4E, 0x69, 0x6F, 0x73, 0x36};

	/*      ENVIANDO O PACOTE DE CONEXÃO     */
	char cmd3[] = "AT+CIPSEND=19";
    8468:	01800384 	movi	r6,14
    846c:	01400074 	movhi	r5,1
    8470:	2965dd04 	addi	r5,r5,-26764
    8474:	d90004c4 	addi	r4,sp,19
    8478:	00088080 	call	8808 <memcpy>
	write_uart(strlen(cmd3),cmd3);
    847c:	d90004c4 	addi	r4,sp,19
    8480:	00089700 	call	8970 <strlen>
    8484:	1009883a 	mov	r4,r2
    8488:	d94004c4 	addi	r5,sp,19
    848c:	000805c0 	call	805c <write_uart>

	read_uart();
    8490:	00081440 	call	8144 <read_uart>
	//printf("%d", sizeof(connect));
	for(z=0; z < sizeof(connect); z++){
    8494:	0021883a 	mov	r16,zero
    8498:	048004c4 	movi	r18,19
	read_uart();

	printf("CONEXAO TCP OK!");
}

void initConnection(){
    849c:	dc05883a 	add	r2,sp,r16
	write_uart(strlen(cmd3),cmd3);

	read_uart();
	//printf("%d", sizeof(connect));
	for(z=0; z < sizeof(connect); z++){
		printf("%c", connect[z]);
    84a0:	14400007 	ldb	r17,0(r2)
	char cmd3[] = "AT+CIPSEND=19";
	write_uart(strlen(cmd3),cmd3);

	read_uart();
	//printf("%d", sizeof(connect));
	for(z=0; z < sizeof(connect); z++){
    84a4:	84000044 	addi	r16,r16,1
		printf("%c", connect[z]);
    84a8:	8809883a 	mov	r4,r17
    84ac:	00088c00 	call	88c0 <putchar>
		write_uart_quick(connect[z]);
    84b0:	8809883a 	mov	r4,r17
    84b4:	00081080 	call	8108 <write_uart_quick>
	char cmd3[] = "AT+CIPSEND=19";
	write_uart(strlen(cmd3),cmd3);

	read_uart();
	//printf("%d", sizeof(connect));
	for(z=0; z < sizeof(connect); z++){
    84b8:	84bff81e 	bne	r16,r18,849c <initConnection+0x5c>
		printf("%c", connect[z]);
		write_uart_quick(connect[z]);
	}
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, '\r');
    84bc:	04000074 	movhi	r16,1
    84c0:	84040104 	addi	r16,r16,4100
    84c4:	00800344 	movi	r2,13
    84c8:	80800035 	stwio	r2,0(r16)
	usleep(1000);
    84cc:	0100fa04 	movi	r4,1000
    84d0:	00095800 	call	9580 <usleep>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, '\n');
    84d4:	00800284 	movi	r2,10
    84d8:	80800035 	stwio	r2,0(r16)
	read_uart();
    84dc:	00081440 	call	8144 <read_uart>

	printf("\nCONEXAO COM O BROKER CONCLUIDA!");
    84e0:	01000074 	movhi	r4,1
    84e4:	2125d404 	addi	r4,r4,-26800
    84e8:	000886c0 	call	886c <printf>
}
    84ec:	dfc00c17 	ldw	ra,48(sp)
    84f0:	dc800b17 	ldw	r18,44(sp)
    84f4:	dc400a17 	ldw	r17,40(sp)
    84f8:	dc000917 	ldw	r16,36(sp)
    84fc:	dec00d04 	addi	sp,sp,52
    8500:	f800283a 	ret

00008504 <sendPublish>:

void sendPublish(int opcao){
    8504:	defff004 	addi	sp,sp,-64
    8508:	dc000c15 	stw	r16,48(sp)
	int z;
	opcao = opcao-1;
	char optop[] = {0x31,0x32,0x33,0x34,0x35};
    850c:	01400074 	movhi	r5,1
    8510:	2965f284 	addi	r5,r5,-26678
	read_uart();

	printf("\nCONEXAO COM O BROKER CONCLUIDA!");
}

void sendPublish(int opcao){
    8514:	2021883a 	mov	r16,r4
	int z;
	opcao = opcao-1;
	char optop[] = {0x31,0x32,0x33,0x34,0x35};
    8518:	01800144 	movi	r6,5
    851c:	d9000a44 	addi	r4,sp,41
	read_uart();

	printf("\nCONEXAO COM O BROKER CONCLUIDA!");
}

void sendPublish(int opcao){
    8520:	dfc00f15 	stw	ra,60(sp)
    8524:	dc800e15 	stw	r18,56(sp)
    8528:	dc400d15 	stw	r17,52(sp)
	int z;
	opcao = opcao-1;
	char optop[] = {0x31,0x32,0x33,0x34,0x35};
    852c:	00088080 	call	8808 <memcpy>
		Tópico = 0x74, 0x65, 0x73, 0x74, 0x65, 0x2f, 0x74, 0x65,
				 0x73, 0x74, 0x65, 0x31 (teste/teste1)
		Mensagem = 0x45, 0x6E, 0x74, 0x72, 0x6F, 0x75, 0x20, 0x6E,
				 0x6F, 0x20, 0x31 (Entrou no 1)
	*/
	char publish[] = {0x30, 0x19, 0x00, 0x0C,
    8530:	d809883a 	mov	r4,sp
    8534:	01400074 	movhi	r5,1
    8538:	2965f3c4 	addi	r5,r5,-26673
    853c:	018006c4 	movi	r6,27
    8540:	00088080 	call	8808 <memcpy>

	/*char publish[] = {0x30, 0x18, 0x00, 0x0C,
				0x74, 0x65, 0x73, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x31,
				0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x57, 0x6F, 0x72, 0x6C, 0x64};
	*/
	publish[26] = optop[opcao];
    8544:	dc21883a 	add	r16,sp,r16
    8548:	80800a03 	ldbu	r2,40(r16)
	/*      ENVIANDO O PACOTE DE PUBLISH     */
	char cmd4[] = "AT+CIPSEND=27"; // 27- teste/teste1
    854c:	01800384 	movi	r6,14
    8550:	01400074 	movhi	r5,1
    8554:	2965e804 	addi	r5,r5,-26720
    8558:	d90006c4 	addi	r4,sp,27

	/*char publish[] = {0x30, 0x18, 0x00, 0x0C,
				0x74, 0x65, 0x73, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x65, 0x31,
				0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x57, 0x6F, 0x72, 0x6C, 0x64};
	*/
	publish[26] = optop[opcao];
    855c:	d8800685 	stb	r2,26(sp)
	/*      ENVIANDO O PACOTE DE PUBLISH     */
	char cmd4[] = "AT+CIPSEND=27"; // 27- teste/teste1
    8560:	00088080 	call	8808 <memcpy>
	write_uart(strlen(cmd4),cmd4);
    8564:	d90006c4 	addi	r4,sp,27
    8568:	00089700 	call	8970 <strlen>
    856c:	1009883a 	mov	r4,r2
    8570:	d94006c4 	addi	r5,sp,27
    8574:	000805c0 	call	805c <write_uart>
	read_uart();
    8578:	00081440 	call	8144 <read_uart>

	for(z=0; z < sizeof(publish); z++){
    857c:	0021883a 	mov	r16,zero
    8580:	048006c4 	movi	r18,27
		printf("---------------\n");
    8584:	01000074 	movhi	r4,1
    8588:	2125e104 	addi	r4,r4,-26748
    858c:	000895c0 	call	895c <puts>
		printf("%d",z);
    8590:	800b883a 	mov	r5,r16
    8594:	01000074 	movhi	r4,1
    8598:	2125e504 	addi	r4,r4,-26732
    859c:	000886c0 	call	886c <printf>
	read_uart();

	printf("\nCONEXAO COM O BROKER CONCLUIDA!");
}

void sendPublish(int opcao){
    85a0:	dc05883a 	add	r2,sp,r16
	read_uart();

	for(z=0; z < sizeof(publish); z++){
		printf("---------------\n");
		printf("%d",z);
		printf(": %c", publish[z]);
    85a4:	14400007 	ldb	r17,0(r2)
    85a8:	01000074 	movhi	r4,1
    85ac:	2125e604 	addi	r4,r4,-26728
	/*      ENVIANDO O PACOTE DE PUBLISH     */
	char cmd4[] = "AT+CIPSEND=27"; // 27- teste/teste1
	write_uart(strlen(cmd4),cmd4);
	read_uart();

	for(z=0; z < sizeof(publish); z++){
    85b0:	84000044 	addi	r16,r16,1
		printf("---------------\n");
		printf("%d",z);
		printf(": %c", publish[z]);
    85b4:	880b883a 	mov	r5,r17
    85b8:	000886c0 	call	886c <printf>
		write_uart_quick(publish[z]);
    85bc:	8809883a 	mov	r4,r17
    85c0:	00081080 	call	8108 <write_uart_quick>
		printf("---------------\n");
    85c4:	01000074 	movhi	r4,1
    85c8:	2125e104 	addi	r4,r4,-26748
    85cc:	000895c0 	call	895c <puts>
	/*      ENVIANDO O PACOTE DE PUBLISH     */
	char cmd4[] = "AT+CIPSEND=27"; // 27- teste/teste1
	write_uart(strlen(cmd4),cmd4);
	read_uart();

	for(z=0; z < sizeof(publish); z++){
    85d0:	84bfec1e 	bne	r16,r18,8584 <sendPublish+0x80>
		printf("%d",z);
		printf(": %c", publish[z]);
		write_uart_quick(publish[z]);
		printf("---------------\n");
	}
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, '\r');
    85d4:	04000074 	movhi	r16,1
    85d8:	84040104 	addi	r16,r16,4100
    85dc:	00800344 	movi	r2,13
    85e0:	80800035 	stwio	r2,0(r16)
	usleep(1000);
    85e4:	0100fa04 	movi	r4,1000
    85e8:	00095800 	call	9580 <usleep>
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, '\n');
    85ec:	00800284 	movi	r2,10
    85f0:	80800035 	stwio	r2,0(r16)
	//usleep(1000);
	read_uart();
    85f4:	00081440 	call	8144 <read_uart>
}
    85f8:	dfc00f17 	ldw	ra,60(sp)
    85fc:	dc800e17 	ldw	r18,56(sp)
    8600:	dc400d17 	ldw	r17,52(sp)
    8604:	dc000c17 	ldw	r16,48(sp)
    8608:	dec01004 	addi	sp,sp,64
    860c:	f800283a 	ret

00008610 <main>:

int main() {
    8610:	deffc604 	addi	sp,sp,-232
	printf("ENTROU");
    8614:	01000074 	movhi	r4,1
    8618:	2125ec04 	addi	r4,r4,-26704
	IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, '\n');
	//usleep(1000);
	read_uart();
}

int main() {
    861c:	dfc03915 	stw	ra,228(sp)
    8620:	dc403115 	stw	r17,196(sp)
    8624:	df003815 	stw	fp,224(sp)
    8628:	ddc03715 	stw	r23,220(sp)
    862c:	dd803615 	stw	r22,216(sp)
    8630:	dd403515 	stw	r21,212(sp)
    8634:	dd003415 	stw	r20,208(sp)
    8638:	dcc03315 	stw	r19,204(sp)
    863c:	dc803215 	stw	r18,200(sp)
    8640:	dc003015 	stw	r16,192(sp)
	printf("ENTROU");
    8644:	000886c0 	call	886c <printf>
 	int sw_value, sw_value1, sw_value2, sw_value3;
	int opcao = 1;
	int entrouOpcao = 0, liberado = 1;

	// INICIALIZAÇÃO DO LCD
	lcd_init();
    8648:	00082b00 	call	82b0 <lcd_init>
	char bemVindo[1][16] = { " SEJA BEM VINDO" };
    864c:	d9002c04 	addi	r4,sp,176
    8650:	01400074 	movhi	r5,1
    8654:	2965fa84 	addi	r5,r5,-26646
    8658:	01800404 	movi	r6,16
    865c:	00088080 	call	8808 <memcpy>
	char conectando[1][16] = { " CONECTANDO..." };
    8660:	d9002804 	addi	r4,sp,160
    8664:	01400074 	movhi	r5,1
    8668:	2965fe84 	addi	r5,r5,-26630
    866c:	01800404 	movi	r6,16
    8670:	00088080 	call	8808 <memcpy>
	char options[5][16] = { "1 opcao", "2 opcao", "3 opcao", "4 opcao",
    8674:	d9001404 	addi	r4,sp,80
    8678:	01400074 	movhi	r5,1
    867c:	29660284 	addi	r5,r5,-26614
    8680:	01801404 	movi	r6,80
    8684:	00088080 	call	8808 <memcpy>
			"5 opcao" };
	// Palavras para serem escritas no LCD
	char options2[5][16] = { "Entrou no 1", "Entrou no 2", "Entrou no 3",
    8688:	d809883a 	mov	r4,sp
    868c:	01400074 	movhi	r5,1
    8690:	29661684 	addi	r5,r5,-26534
    8694:	01801404 	movi	r6,80
    8698:	00088080 	call	8808 <memcpy>
			"Entrou no 4", "Entrou no 5" };

	// Desligar todos os LEDS
	IOWR_ALTERA_AVALON_PIO_DATA(LED1_BASE, 1);
    869c:	04400044 	movi	r17,1
    86a0:	00800074 	movhi	r2,1
    86a4:	10842804 	addi	r2,r2,4256
    86a8:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED2_BASE, 1);
    86ac:	10bff804 	addi	r2,r2,-32
    86b0:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED3_BASE, 1);
    86b4:	10bffc04 	addi	r2,r2,-16
    86b8:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED4_BASE, 1);
    86bc:	10bffc04 	addi	r2,r2,-16
    86c0:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED5_BASE, 1);
    86c4:	10bffc04 	addi	r2,r2,-16
    86c8:	14400035 	stwio	r17,0(r2)

	printalcd(bemVindo, opcao);
    86cc:	880b883a 	mov	r5,r17
    86d0:	d9002c04 	addi	r4,sp,176
    86d4:	000821c0 	call	821c <printalcd>
	usleep(2000000);
    86d8:	010007f4 	movhi	r4,31
    86dc:	21212004 	addi	r4,r4,-31616
    86e0:	00095800 	call	9580 <usleep>
	printalcd(conectando, opcao);
    86e4:	d9002804 	addi	r4,sp,160
    86e8:	880b883a 	mov	r5,r17
    86ec:	000821c0 	call	821c <printalcd>

	//_________________________COMANDOS AT__________________________________

	//atTest();

	networkConnection();
    86f0:	00083a80 	call	83a8 <networkConnection>

	tcpConnection();
    86f4:	00083f40 	call	83f4 <tcpConnection>

	initConnection();
    86f8:	00084400 	call	8440 <initConnection>

	//_______________________FIM DOS COMANDOS AT____________________________

	printalcd(options, opcao);
    86fc:	d9001404 	addi	r4,sp,80
    8700:	880b883a 	mov	r5,r17
    8704:	000821c0 	call	821c <printalcd>
	*/
	//char disconnect[] = {0xE0, 0x00};

 	int sw_value, sw_value1, sw_value2, sw_value3;
	int opcao = 1;
	int entrouOpcao = 0, liberado = 1;
    8708:	002b883a 	mov	r21,zero
		Tamango total da mensagem = 0x00 (0)
	*/
	//char disconnect[] = {0xE0, 0x00};

 	int sw_value, sw_value1, sw_value2, sw_value3;
	int opcao = 1;
    870c:	8821883a 	mov	r16,r17

	printalcd(options, opcao);
	while (1) {
		sw_value = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTON1_BASE);
		sw_value1 = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTON2_BASE);
		sw_value2 = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTON3_BASE);
    8710:	05c00074 	movhi	r23,1
    8714:	bdc40c04 	addi	r23,r23,4144
		sw_value3 = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTON4_BASE);
    8718:	07000074 	movhi	fp,1
    871c:	e7040804 	addi	fp,fp,4128
    8720:	882d883a 	mov	r22,r17
    8724:	00000106 	br	872c <main+0x11c>
		}
		//printf("OPCAO: %i \n", opcao);

		// Liberar button
		if (sw_value == 1 && sw_value1 == 1 && sw_value3 == 1) {
			liberado = 1;
    8728:	b023883a 	mov	r17,r22

	//_______________________FIM DOS COMANDOS AT____________________________

	printalcd(options, opcao);
	while (1) {
		sw_value = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTON1_BASE);
    872c:	00800074 	movhi	r2,1
    8730:	10842404 	addi	r2,r2,4240
    8734:	15000037 	ldwio	r20,0(r2)
		sw_value1 = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTON2_BASE);
    8738:	10bfec04 	addi	r2,r2,-80
    873c:	14c00037 	ldwio	r19,0(r2)
		sw_value2 = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTON3_BASE);
    8740:	b9000037 	ldwio	r4,0(r23)
		sw_value3 = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTON4_BASE);
    8744:	e4800037 	ldwio	r18,0(fp)
		//printf("%x", sw_value3);
		//usleep(150000); /* Wait for more than 15 ms before init */

		if (sw_value == 0 && entrouOpcao == 0 && liberado == 1) { // Aperta o button1
    8748:	a000071e 	bne	r20,zero,8768 <main+0x158>
    874c:	a800131e 	bne	r21,zero,879c <main+0x18c>
    8750:	8d80121e 	bne	r17,r22,879c <main+0x18c>
			if (opcao == 1) {
    8754:	85800226 	beq	r16,r22,8760 <main+0x150>
				opcao = 5;
			} else {
				opcao--;
    8758:	843fffc4 	addi	r16,r16,-1
    875c:	00000a06 	br	8788 <main+0x178>
		//printf("%x", sw_value3);
		//usleep(150000); /* Wait for more than 15 ms before init */

		if (sw_value == 0 && entrouOpcao == 0 && liberado == 1) { // Aperta o button1
			if (opcao == 1) {
				opcao = 5;
    8760:	04000144 	movi	r16,5
    8764:	00000806 	br	8788 <main+0x178>
			} else {
				opcao--;
			}
			printalcd(options, opcao);
			liberado = 0;
		} else if (sw_value1 == 0 && entrouOpcao == 0 && liberado == 1) { // Aperta o button2
    8768:	98000c1e 	bne	r19,zero,879c <main+0x18c>
    876c:	a8000b1e 	bne	r21,zero,879c <main+0x18c>
    8770:	8d800a1e 	bne	r17,r22,879c <main+0x18c>
			if (opcao == 5) {
    8774:	01000144 	movi	r4,5
    8778:	81000226 	beq	r16,r4,8784 <main+0x174>
				opcao = 1;
			} else {
				opcao++;
    877c:	84000044 	addi	r16,r16,1
    8780:	00000106 	br	8788 <main+0x178>
			}
			printalcd(options, opcao);
			liberado = 0;
		} else if (sw_value1 == 0 && entrouOpcao == 0 && liberado == 1) { // Aperta o button2
			if (opcao == 5) {
				opcao = 1;
    8784:	b021883a 	mov	r16,r22
			} else {
				opcao++;
			}
			printalcd(options, opcao);
    8788:	d9001404 	addi	r4,sp,80
    878c:	800b883a 	mov	r5,r16
    8790:	000821c0 	call	821c <printalcd>
			liberado = 0;
    8794:	0023883a 	mov	r17,zero
    8798:	003fe406 	br	872c <main+0x11c>
		} else if (sw_value2 == 0) { // Aperta o button3
    879c:	2000081e 	bne	r4,zero,87c0 <main+0x1b0>
			acenderLeds(opcao, 1);
    87a0:	8009883a 	mov	r4,r16
    87a4:	01400044 	movi	r5,1
    87a8:	00081b40 	call	81b4 <acenderLeds>
			entrouOpcao = 0;
			printalcd(options, opcao);
    87ac:	d9001404 	addi	r4,sp,80
    87b0:	800b883a 	mov	r5,r16
    87b4:	000821c0 	call	821c <printalcd>
			}
			printalcd(options, opcao);
			liberado = 0;
		} else if (sw_value2 == 0) { // Aperta o button3
			acenderLeds(opcao, 1);
			entrouOpcao = 0;
    87b8:	002b883a 	mov	r21,zero
    87bc:	00000e06 	br	87f8 <main+0x1e8>
			printalcd(options, opcao);
		} else if (sw_value3 == 0 && liberado == 1) { // Aperta o button4
    87c0:	90000d1e 	bne	r18,zero,87f8 <main+0x1e8>
    87c4:	8d800b1e 	bne	r17,r22,87f4 <main+0x1e4>
			acenderLeds(opcao, 0);
    87c8:	000b883a 	mov	r5,zero
    87cc:	8009883a 	mov	r4,r16
    87d0:	00081b40 	call	81b4 <acenderLeds>

			sendPublish(opcao);
    87d4:	8009883a 	mov	r4,r16
    87d8:	00085040 	call	8504 <sendPublish>

			printalcd(options2, opcao);
    87dc:	d809883a 	mov	r4,sp
    87e0:	800b883a 	mov	r5,r16
    87e4:	000821c0 	call	821c <printalcd>
			entrouOpcao = 1;
			liberado = 0;
    87e8:	0023883a 	mov	r17,zero
			acenderLeds(opcao, 0);

			sendPublish(opcao);

			printalcd(options2, opcao);
			entrouOpcao = 1;
    87ec:	05400044 	movi	r21,1
    87f0:	00000106 	br	87f8 <main+0x1e8>
			liberado = 0;
		} else if (sw_value2 == 0) { // Aperta o button3
			acenderLeds(opcao, 1);
			entrouOpcao = 0;
			printalcd(options, opcao);
		} else if (sw_value3 == 0 && liberado == 1) { // Aperta o button4
    87f4:	0023883a 	mov	r17,zero
			liberado = 0;
		}
		//printf("OPCAO: %i \n", opcao);

		// Liberar button
		if (sw_value == 1 && sw_value1 == 1 && sw_value3 == 1) {
    87f8:	a5bfcc1e 	bne	r20,r22,872c <main+0x11c>
    87fc:	9dbfcb1e 	bne	r19,r22,872c <main+0x11c>
    8800:	95bfca1e 	bne	r18,r22,872c <main+0x11c>
    8804:	003fc806 	br	8728 <main+0x118>

00008808 <memcpy>:
    8808:	2005883a 	mov	r2,r4
    880c:	30000726 	beq	r6,zero,882c <memcpy+0x24>
    8810:	218d883a 	add	r6,r4,r6
    8814:	2007883a 	mov	r3,r4
    8818:	29c00003 	ldbu	r7,0(r5)
    881c:	18c00044 	addi	r3,r3,1
    8820:	29400044 	addi	r5,r5,1
    8824:	19ffffc5 	stb	r7,-1(r3)
    8828:	19bffb1e 	bne	r3,r6,8818 <memcpy+0x10>
    882c:	f800283a 	ret

00008830 <_printf_r>:
    8830:	defffd04 	addi	sp,sp,-12
    8834:	dfc00015 	stw	ra,0(sp)
    8838:	d9800115 	stw	r6,4(sp)
    883c:	d9c00215 	stw	r7,8(sp)
    8840:	20800217 	ldw	r2,8(r4)
    8844:	00c00074 	movhi	r3,1
    8848:	18e43c04 	addi	r3,r3,-28432
    884c:	280d883a 	mov	r6,r5
    8850:	10c00115 	stw	r3,4(r2)
    8854:	100b883a 	mov	r5,r2
    8858:	d9c00104 	addi	r7,sp,4
    885c:	00089980 	call	8998 <___vfprintf_internal_r>
    8860:	dfc00017 	ldw	ra,0(sp)
    8864:	dec00304 	addi	sp,sp,12
    8868:	f800283a 	ret

0000886c <printf>:
    886c:	defffc04 	addi	sp,sp,-16
    8870:	dfc00015 	stw	ra,0(sp)
    8874:	d9400115 	stw	r5,4(sp)
    8878:	d9800215 	stw	r6,8(sp)
    887c:	d9c00315 	stw	r7,12(sp)
    8880:	00800074 	movhi	r2,1
    8884:	10a66604 	addi	r2,r2,-26216
    8888:	10800017 	ldw	r2,0(r2)
    888c:	00c00074 	movhi	r3,1
    8890:	18e43c04 	addi	r3,r3,-28432
    8894:	200b883a 	mov	r5,r4
    8898:	10800217 	ldw	r2,8(r2)
    889c:	d9800104 	addi	r6,sp,4
    88a0:	10c00115 	stw	r3,4(r2)
    88a4:	1009883a 	mov	r4,r2
    88a8:	00090cc0 	call	90cc <__vfprintf_internal>
    88ac:	dfc00017 	ldw	ra,0(sp)
    88b0:	dec00404 	addi	sp,sp,16
    88b4:	f800283a 	ret

000088b8 <_putchar_r>:
    88b8:	21800217 	ldw	r6,8(r4)
    88bc:	000922c1 	jmpi	922c <_putc_r>

000088c0 <putchar>:
    88c0:	00800074 	movhi	r2,1
    88c4:	10a66604 	addi	r2,r2,-26216
    88c8:	10800017 	ldw	r2,0(r2)
    88cc:	200b883a 	mov	r5,r4
    88d0:	11800217 	ldw	r6,8(r2)
    88d4:	1009883a 	mov	r4,r2
    88d8:	000922c1 	jmpi	922c <_putc_r>

000088dc <_puts_r>:
    88dc:	defffd04 	addi	sp,sp,-12
    88e0:	dc000015 	stw	r16,0(sp)
    88e4:	2021883a 	mov	r16,r4
    88e8:	2809883a 	mov	r4,r5
    88ec:	dfc00215 	stw	ra,8(sp)
    88f0:	dc400115 	stw	r17,4(sp)
    88f4:	2823883a 	mov	r17,r5
    88f8:	00089700 	call	8970 <strlen>
    88fc:	81400217 	ldw	r5,8(r16)
    8900:	00c00074 	movhi	r3,1
    8904:	18e43c04 	addi	r3,r3,-28432
    8908:	880d883a 	mov	r6,r17
    890c:	8009883a 	mov	r4,r16
    8910:	28c00115 	stw	r3,4(r5)
    8914:	100f883a 	mov	r7,r2
    8918:	183ee83a 	callr	r3
    891c:	047fffc4 	movi	r17,-1
    8920:	14400926 	beq	r2,r17,8948 <_puts_r+0x6c>
    8924:	81400217 	ldw	r5,8(r16)
    8928:	8009883a 	mov	r4,r16
    892c:	01800074 	movhi	r6,1
    8930:	31a62b04 	addi	r6,r6,-26452
    8934:	28800117 	ldw	r2,4(r5)
    8938:	01c00044 	movi	r7,1
    893c:	103ee83a 	callr	r2
    8940:	14400126 	beq	r2,r17,8948 <_puts_r+0x6c>
    8944:	0005883a 	mov	r2,zero
    8948:	dfc00217 	ldw	ra,8(sp)
    894c:	dc400117 	ldw	r17,4(sp)
    8950:	dc000017 	ldw	r16,0(sp)
    8954:	dec00304 	addi	sp,sp,12
    8958:	f800283a 	ret

0000895c <puts>:
    895c:	00800074 	movhi	r2,1
    8960:	10a66604 	addi	r2,r2,-26216
    8964:	200b883a 	mov	r5,r4
    8968:	11000017 	ldw	r4,0(r2)
    896c:	00088dc1 	jmpi	88dc <_puts_r>

00008970 <strlen>:
    8970:	20800007 	ldb	r2,0(r4)
    8974:	10000626 	beq	r2,zero,8990 <strlen+0x20>
    8978:	2005883a 	mov	r2,r4
    897c:	10800044 	addi	r2,r2,1
    8980:	10c00007 	ldb	r3,0(r2)
    8984:	183ffd1e 	bne	r3,zero,897c <strlen+0xc>
    8988:	1105c83a 	sub	r2,r2,r4
    898c:	f800283a 	ret
    8990:	0005883a 	mov	r2,zero
    8994:	f800283a 	ret

00008998 <___vfprintf_internal_r>:
    8998:	deffe004 	addi	sp,sp,-128
    899c:	d8c00804 	addi	r3,sp,32
    89a0:	ddc01d15 	stw	r23,116(sp)
    89a4:	dd401b15 	stw	r21,108(sp)
    89a8:	dd001a15 	stw	r20,104(sp)
    89ac:	dcc01915 	stw	r19,100(sp)
    89b0:	dc801815 	stw	r18,96(sp)
    89b4:	dc001615 	stw	r16,88(sp)
    89b8:	dfc01f15 	stw	ra,124(sp)
    89bc:	df001e15 	stw	fp,120(sp)
    89c0:	dd801c15 	stw	r22,112(sp)
    89c4:	dc401715 	stw	r17,92(sp)
    89c8:	d9000f15 	stw	r4,60(sp)
    89cc:	d9c00e15 	stw	r7,56(sp)
    89d0:	3021883a 	mov	r16,r6
    89d4:	0025883a 	mov	r18,zero
    89d8:	d8001415 	stw	zero,80(sp)
    89dc:	d8000d15 	stw	zero,52(sp)
    89e0:	0029883a 	mov	r20,zero
    89e4:	d8000b15 	stw	zero,44(sp)
    89e8:	d8000c15 	stw	zero,48(sp)
    89ec:	d8001315 	stw	zero,76(sp)
    89f0:	d8001015 	stw	zero,64(sp)
    89f4:	002b883a 	mov	r21,zero
    89f8:	04c00044 	movi	r19,1
    89fc:	d8c00a15 	stw	r3,40(sp)
    8a00:	282f883a 	mov	r23,r5
    8a04:	80c00003 	ldbu	r3,0(r16)
    8a08:	84000044 	addi	r16,r16,1
    8a0c:	18803fcc 	andi	r2,r3,255
    8a10:	1080201c 	xori	r2,r2,128
    8a14:	10bfe004 	addi	r2,r2,-128
    8a18:	10001426 	beq	r2,zero,8a6c <___vfprintf_internal_r+0xd4>
    8a1c:	acc03026 	beq	r21,r19,8ae0 <___vfprintf_internal_r+0x148>
    8a20:	9d401f16 	blt	r19,r21,8aa0 <___vfprintf_internal_r+0x108>
    8a24:	a83ff71e 	bne	r21,zero,8a04 <___vfprintf_internal_r+0x6c>
    8a28:	01000944 	movi	r4,37
    8a2c:	1100d926 	beq	r2,r4,8d94 <___vfprintf_internal_r+0x3fc>
    8a30:	b8800117 	ldw	r2,4(r23)
    8a34:	d9000f17 	ldw	r4,60(sp)
    8a38:	d8c00905 	stb	r3,36(sp)
    8a3c:	b80b883a 	mov	r5,r23
    8a40:	d9800904 	addi	r6,sp,36
    8a44:	01c00044 	movi	r7,1
    8a48:	103ee83a 	callr	r2
    8a4c:	1000a31e 	bne	r2,zero,8cdc <___vfprintf_internal_r+0x344>
    8a50:	80c00003 	ldbu	r3,0(r16)
    8a54:	94800044 	addi	r18,r18,1
    8a58:	84000044 	addi	r16,r16,1
    8a5c:	18803fcc 	andi	r2,r3,255
    8a60:	1080201c 	xori	r2,r2,128
    8a64:	10bfe004 	addi	r2,r2,-128
    8a68:	103fec1e 	bne	r2,zero,8a1c <___vfprintf_internal_r+0x84>
    8a6c:	9005883a 	mov	r2,r18
    8a70:	dfc01f17 	ldw	ra,124(sp)
    8a74:	df001e17 	ldw	fp,120(sp)
    8a78:	ddc01d17 	ldw	r23,116(sp)
    8a7c:	dd801c17 	ldw	r22,112(sp)
    8a80:	dd401b17 	ldw	r21,108(sp)
    8a84:	dd001a17 	ldw	r20,104(sp)
    8a88:	dcc01917 	ldw	r19,100(sp)
    8a8c:	dc801817 	ldw	r18,96(sp)
    8a90:	dc401717 	ldw	r17,92(sp)
    8a94:	dc001617 	ldw	r16,88(sp)
    8a98:	dec02004 	addi	sp,sp,128
    8a9c:	f800283a 	ret
    8aa0:	01000084 	movi	r4,2
    8aa4:	a9001226 	beq	r21,r4,8af0 <___vfprintf_internal_r+0x158>
    8aa8:	010000c4 	movi	r4,3
    8aac:	a93fd51e 	bne	r21,r4,8a04 <___vfprintf_internal_r+0x6c>
    8ab0:	1c7ff404 	addi	r17,r3,-48
    8ab4:	8c403fcc 	andi	r17,r17,255
    8ab8:	01000244 	movi	r4,9
    8abc:	24401b36 	bltu	r4,r17,8b2c <___vfprintf_internal_r+0x194>
    8ac0:	d9000b17 	ldw	r4,44(sp)
    8ac4:	00bfffc4 	movi	r2,-1
    8ac8:	2080ea26 	beq	r4,r2,8e74 <___vfprintf_internal_r+0x4dc>
    8acc:	01400284 	movi	r5,10
    8ad0:	00094280 	call	9428 <__mulsi3>
    8ad4:	88a3883a 	add	r17,r17,r2
    8ad8:	dc400b15 	stw	r17,44(sp)
    8adc:	003fc906 	br	8a04 <___vfprintf_internal_r+0x6c>
    8ae0:	01000c04 	movi	r4,48
    8ae4:	1100de26 	beq	r2,r4,8e60 <___vfprintf_internal_r+0x4c8>
    8ae8:	01000944 	movi	r4,37
    8aec:	1100fd26 	beq	r2,r4,8ee4 <___vfprintf_internal_r+0x54c>
    8af0:	1c7ff404 	addi	r17,r3,-48
    8af4:	8c403fcc 	andi	r17,r17,255
    8af8:	01000244 	movi	r4,9
    8afc:	24400936 	bltu	r4,r17,8b24 <___vfprintf_internal_r+0x18c>
    8b00:	d9000c17 	ldw	r4,48(sp)
    8b04:	00bfffc4 	movi	r2,-1
    8b08:	2080d826 	beq	r4,r2,8e6c <___vfprintf_internal_r+0x4d4>
    8b0c:	01400284 	movi	r5,10
    8b10:	00094280 	call	9428 <__mulsi3>
    8b14:	88a3883a 	add	r17,r17,r2
    8b18:	dc400c15 	stw	r17,48(sp)
    8b1c:	05400084 	movi	r21,2
    8b20:	003fb806 	br	8a04 <___vfprintf_internal_r+0x6c>
    8b24:	01000b84 	movi	r4,46
    8b28:	1100a726 	beq	r2,r4,8dc8 <___vfprintf_internal_r+0x430>
    8b2c:	01401b04 	movi	r5,108
    8b30:	1140a326 	beq	r2,r5,8dc0 <___vfprintf_internal_r+0x428>
    8b34:	d9000b17 	ldw	r4,44(sp)
    8b38:	00bfffc4 	movi	r2,-1
    8b3c:	2080e626 	beq	r4,r2,8ed8 <___vfprintf_internal_r+0x540>
    8b40:	d8001015 	stw	zero,64(sp)
    8b44:	18ffea04 	addi	r3,r3,-88
    8b48:	18c03fcc 	andi	r3,r3,255
    8b4c:	00800804 	movi	r2,32
    8b50:	10c0022e 	bgeu	r2,r3,8b5c <___vfprintf_internal_r+0x1c4>
    8b54:	002b883a 	mov	r21,zero
    8b58:	003faa06 	br	8a04 <___vfprintf_internal_r+0x6c>
    8b5c:	18c7883a 	add	r3,r3,r3
    8b60:	18c7883a 	add	r3,r3,r3
    8b64:	01400074 	movhi	r5,1
    8b68:	2962de04 	addi	r5,r5,-29832
    8b6c:	1947883a 	add	r3,r3,r5
    8b70:	18800017 	ldw	r2,0(r3)
    8b74:	1000683a 	jmp	r2
    8b78:	00008f10 	cmplti	zero,zero,572
    8b7c:	00008b54 	movui	zero,557
    8b80:	00008b54 	movui	zero,557
    8b84:	00008b54 	movui	zero,557
    8b88:	00008b54 	movui	zero,557
    8b8c:	00008b54 	movui	zero,557
    8b90:	00008b54 	movui	zero,557
    8b94:	00008b54 	movui	zero,557
    8b98:	00008b54 	movui	zero,557
    8b9c:	00008b54 	movui	zero,557
    8ba0:	00008b54 	movui	zero,557
    8ba4:	00008f20 	cmpeqi	zero,zero,572
    8ba8:	00008bfc 	xorhi	zero,zero,559
    8bac:	00008b54 	movui	zero,557
    8bb0:	00008b54 	movui	zero,557
    8bb4:	00008b54 	movui	zero,557
    8bb8:	00008b54 	movui	zero,557
    8bbc:	00008bfc 	xorhi	zero,zero,559
    8bc0:	00008b54 	movui	zero,557
    8bc4:	00008b54 	movui	zero,557
    8bc8:	00008b54 	movui	zero,557
    8bcc:	00008b54 	movui	zero,557
    8bd0:	00008b54 	movui	zero,557
    8bd4:	00008ce4 	muli	zero,zero,563
    8bd8:	00008b54 	movui	zero,557
    8bdc:	00008b54 	movui	zero,557
    8be0:	00008b54 	movui	zero,557
    8be4:	00008f6c 	andhi	zero,zero,573
    8be8:	00008b54 	movui	zero,557
    8bec:	00008ce8 	cmpgeui	zero,zero,563
    8bf0:	00008b54 	movui	zero,557
    8bf4:	00008b54 	movui	zero,557
    8bf8:	00008f18 	cmpnei	zero,zero,572
    8bfc:	d8c00d17 	ldw	r3,52(sp)
    8c00:	18003926 	beq	r3,zero,8ce8 <___vfprintf_internal_r+0x350>
    8c04:	d9000e17 	ldw	r4,56(sp)
    8c08:	00c00044 	movi	r3,1
    8c0c:	25400017 	ldw	r21,0(r4)
    8c10:	21000104 	addi	r4,r4,4
    8c14:	d9000e15 	stw	r4,56(sp)
    8c18:	d8c00d15 	stw	r3,52(sp)
    8c1c:	a8012116 	blt	r21,zero,90a4 <___vfprintf_internal_r+0x70c>
    8c20:	d8001215 	stw	zero,72(sp)
    8c24:	d823883a 	mov	r17,sp
    8c28:	a800371e 	bne	r21,zero,8d08 <___vfprintf_internal_r+0x370>
    8c2c:	d9400b17 	ldw	r5,44(sp)
    8c30:	d809883a 	mov	r4,sp
    8c34:	01400b0e 	bge	zero,r5,8c64 <___vfprintf_internal_r+0x2cc>
    8c38:	d8800b17 	ldw	r2,44(sp)
    8c3c:	d823883a 	mov	r17,sp
    8c40:	00c00c04 	movi	r3,48
    8c44:	00000206 	br	8c50 <___vfprintf_internal_r+0x2b8>
    8c48:	d9400a17 	ldw	r5,40(sp)
    8c4c:	89400426 	beq	r17,r5,8c60 <___vfprintf_internal_r+0x2c8>
    8c50:	88c00005 	stb	r3,0(r17)
    8c54:	10bfffc4 	addi	r2,r2,-1
    8c58:	8c400044 	addi	r17,r17,1
    8c5c:	103ffa1e 	bne	r2,zero,8c48 <___vfprintf_internal_r+0x2b0>
    8c60:	892bc83a 	sub	r21,r17,r4
    8c64:	d8c01217 	ldw	r3,72(sp)
    8c68:	d9000c17 	ldw	r4,48(sp)
    8c6c:	a8c5883a 	add	r2,r21,r3
    8c70:	d8c01017 	ldw	r3,64(sp)
    8c74:	2085c83a 	sub	r2,r4,r2
    8c78:	d8801115 	stw	r2,68(sp)
    8c7c:	18007f26 	beq	r3,zero,8e7c <___vfprintf_internal_r+0x4e4>
    8c80:	d8c01217 	ldw	r3,72(sp)
    8c84:	1800fa1e 	bne	r3,zero,9070 <___vfprintf_internal_r+0x6d8>
    8c88:	d8c01117 	ldw	r3,68(sp)
    8c8c:	00c0620e 	bge	zero,r3,8e18 <___vfprintf_internal_r+0x480>
    8c90:	00800c04 	movi	r2,48
    8c94:	d88008c5 	stb	r2,35(sp)
    8c98:	b805883a 	mov	r2,r23
    8c9c:	dc001215 	stw	r16,72(sp)
    8ca0:	882f883a 	mov	r23,r17
    8ca4:	1f3fffc4 	addi	fp,r3,-1
    8ca8:	05bfffc4 	movi	r22,-1
    8cac:	dc000f17 	ldw	r16,60(sp)
    8cb0:	1023883a 	mov	r17,r2
    8cb4:	00000206 	br	8cc0 <___vfprintf_internal_r+0x328>
    8cb8:	e73fffc4 	addi	fp,fp,-1
    8cbc:	e580fc26 	beq	fp,r22,90b0 <___vfprintf_internal_r+0x718>
    8cc0:	88800117 	ldw	r2,4(r17)
    8cc4:	8009883a 	mov	r4,r16
    8cc8:	880b883a 	mov	r5,r17
    8ccc:	d98008c4 	addi	r6,sp,35
    8cd0:	01c00044 	movi	r7,1
    8cd4:	103ee83a 	callr	r2
    8cd8:	103ff726 	beq	r2,zero,8cb8 <___vfprintf_internal_r+0x320>
    8cdc:	04bfffc4 	movi	r18,-1
    8ce0:	003f6206 	br	8a6c <___vfprintf_internal_r+0xd4>
    8ce4:	05000204 	movi	r20,8
    8ce8:	d9400e17 	ldw	r5,56(sp)
    8cec:	2d400017 	ldw	r21,0(r5)
    8cf0:	29400104 	addi	r5,r5,4
    8cf4:	d9400e15 	stw	r5,56(sp)
    8cf8:	d8000d15 	stw	zero,52(sp)
    8cfc:	d8001215 	stw	zero,72(sp)
    8d00:	d823883a 	mov	r17,sp
    8d04:	a83fc926 	beq	r21,zero,8c2c <___vfprintf_internal_r+0x294>
    8d08:	05800244 	movi	r22,9
    8d0c:	dc001115 	stw	r16,68(sp)
    8d10:	df001417 	ldw	fp,80(sp)
    8d14:	00000506 	br	8d2c <___vfprintf_internal_r+0x394>
    8d18:	15400c04 	addi	r21,r2,48
    8d1c:	8d400005 	stb	r21,0(r17)
    8d20:	802b883a 	mov	r21,r16
    8d24:	8c400044 	addi	r17,r17,1
    8d28:	80000f26 	beq	r16,zero,8d68 <___vfprintf_internal_r+0x3d0>
    8d2c:	a809883a 	mov	r4,r21
    8d30:	a00b883a 	mov	r5,r20
    8d34:	00094180 	call	9418 <__udivsi3>
    8d38:	a009883a 	mov	r4,r20
    8d3c:	100b883a 	mov	r5,r2
    8d40:	1021883a 	mov	r16,r2
    8d44:	00094280 	call	9428 <__mulsi3>
    8d48:	a885c83a 	sub	r2,r21,r2
    8d4c:	b0bff20e 	bge	r22,r2,8d18 <___vfprintf_internal_r+0x380>
    8d50:	e0000e26 	beq	fp,zero,8d8c <___vfprintf_internal_r+0x3f4>
    8d54:	15400dc4 	addi	r21,r2,55
    8d58:	8d400005 	stb	r21,0(r17)
    8d5c:	802b883a 	mov	r21,r16
    8d60:	8c400044 	addi	r17,r17,1
    8d64:	803ff11e 	bne	r16,zero,8d2c <___vfprintf_internal_r+0x394>
    8d68:	d9000b17 	ldw	r4,44(sp)
    8d6c:	8eebc83a 	sub	r21,r17,sp
    8d70:	dc001117 	ldw	r16,68(sp)
    8d74:	2545c83a 	sub	r2,r4,r21
    8d78:	d809883a 	mov	r4,sp
    8d7c:	00bfb90e 	bge	zero,r2,8c64 <___vfprintf_internal_r+0x2cc>
    8d80:	d8c00a17 	ldw	r3,40(sp)
    8d84:	88ffae36 	bltu	r17,r3,8c40 <___vfprintf_internal_r+0x2a8>
    8d88:	003fb606 	br	8c64 <___vfprintf_internal_r+0x2cc>
    8d8c:	154015c4 	addi	r21,r2,87
    8d90:	003fe206 	br	8d1c <___vfprintf_internal_r+0x384>
    8d94:	00c00044 	movi	r3,1
    8d98:	013fffc4 	movi	r4,-1
    8d9c:	d8c00d15 	stw	r3,52(sp)
    8da0:	d9000b15 	stw	r4,44(sp)
    8da4:	d8001415 	stw	zero,80(sp)
    8da8:	05000284 	movi	r20,10
    8dac:	d9000c15 	stw	r4,48(sp)
    8db0:	d8001315 	stw	zero,76(sp)
    8db4:	d8001015 	stw	zero,64(sp)
    8db8:	182b883a 	mov	r21,r3
    8dbc:	003f1106 	br	8a04 <___vfprintf_internal_r+0x6c>
    8dc0:	00c00044 	movi	r3,1
    8dc4:	d8c01315 	stw	r3,76(sp)
    8dc8:	054000c4 	movi	r21,3
    8dcc:	003f0d06 	br	8a04 <___vfprintf_internal_r+0x6c>
    8dd0:	d8c01117 	ldw	r3,68(sp)
    8dd4:	dc001517 	ldw	r16,84(sp)
    8dd8:	8805883a 	mov	r2,r17
    8ddc:	90e5883a 	add	r18,r18,r3
    8de0:	b823883a 	mov	r17,r23
    8de4:	102f883a 	mov	r23,r2
    8de8:	d8c01217 	ldw	r3,72(sp)
    8dec:	18000a26 	beq	r3,zero,8e18 <___vfprintf_internal_r+0x480>
    8df0:	b8800117 	ldw	r2,4(r23)
    8df4:	d9000f17 	ldw	r4,60(sp)
    8df8:	00c00b44 	movi	r3,45
    8dfc:	d8c00905 	stb	r3,36(sp)
    8e00:	b80b883a 	mov	r5,r23
    8e04:	d9800904 	addi	r6,sp,36
    8e08:	01c00044 	movi	r7,1
    8e0c:	103ee83a 	callr	r2
    8e10:	103fb21e 	bne	r2,zero,8cdc <___vfprintf_internal_r+0x344>
    8e14:	94800044 	addi	r18,r18,1
    8e18:	8d6dc83a 	sub	r22,r17,r21
    8e1c:	057f4d0e 	bge	zero,r21,8b54 <___vfprintf_internal_r+0x1bc>
    8e20:	dd400f17 	ldw	r21,60(sp)
    8e24:	00000206 	br	8e30 <___vfprintf_internal_r+0x498>
    8e28:	94800044 	addi	r18,r18,1
    8e2c:	8dbf4926 	beq	r17,r22,8b54 <___vfprintf_internal_r+0x1bc>
    8e30:	8c7fffc4 	addi	r17,r17,-1
    8e34:	88c00003 	ldbu	r3,0(r17)
    8e38:	b8800117 	ldw	r2,4(r23)
    8e3c:	a809883a 	mov	r4,r21
    8e40:	d8c00905 	stb	r3,36(sp)
    8e44:	b80b883a 	mov	r5,r23
    8e48:	d9800904 	addi	r6,sp,36
    8e4c:	01c00044 	movi	r7,1
    8e50:	103ee83a 	callr	r2
    8e54:	103ff426 	beq	r2,zero,8e28 <___vfprintf_internal_r+0x490>
    8e58:	04bfffc4 	movi	r18,-1
    8e5c:	003f0306 	br	8a6c <___vfprintf_internal_r+0xd4>
    8e60:	dd401015 	stw	r21,64(sp)
    8e64:	05400084 	movi	r21,2
    8e68:	003ee606 	br	8a04 <___vfprintf_internal_r+0x6c>
    8e6c:	0005883a 	mov	r2,zero
    8e70:	003f2806 	br	8b14 <___vfprintf_internal_r+0x17c>
    8e74:	0005883a 	mov	r2,zero
    8e78:	003f1606 	br	8ad4 <___vfprintf_internal_r+0x13c>
    8e7c:	d8c01117 	ldw	r3,68(sp)
    8e80:	00ffd90e 	bge	zero,r3,8de8 <___vfprintf_internal_r+0x450>
    8e84:	00800804 	movi	r2,32
    8e88:	d8800885 	stb	r2,34(sp)
    8e8c:	b805883a 	mov	r2,r23
    8e90:	dc001515 	stw	r16,84(sp)
    8e94:	882f883a 	mov	r23,r17
    8e98:	1f3fffc4 	addi	fp,r3,-1
    8e9c:	05bfffc4 	movi	r22,-1
    8ea0:	dc000f17 	ldw	r16,60(sp)
    8ea4:	1023883a 	mov	r17,r2
    8ea8:	00000206 	br	8eb4 <___vfprintf_internal_r+0x51c>
    8eac:	e73fffc4 	addi	fp,fp,-1
    8eb0:	e5bfc726 	beq	fp,r22,8dd0 <___vfprintf_internal_r+0x438>
    8eb4:	88800117 	ldw	r2,4(r17)
    8eb8:	8009883a 	mov	r4,r16
    8ebc:	880b883a 	mov	r5,r17
    8ec0:	d9800884 	addi	r6,sp,34
    8ec4:	01c00044 	movi	r7,1
    8ec8:	103ee83a 	callr	r2
    8ecc:	103ff726 	beq	r2,zero,8eac <___vfprintf_internal_r+0x514>
    8ed0:	04bfffc4 	movi	r18,-1
    8ed4:	003ee506 	br	8a6c <___vfprintf_internal_r+0xd4>
    8ed8:	01000044 	movi	r4,1
    8edc:	d9000b15 	stw	r4,44(sp)
    8ee0:	003f1806 	br	8b44 <___vfprintf_internal_r+0x1ac>
    8ee4:	b8c00117 	ldw	r3,4(r23)
    8ee8:	d9000f17 	ldw	r4,60(sp)
    8eec:	d8800905 	stb	r2,36(sp)
    8ef0:	b80b883a 	mov	r5,r23
    8ef4:	d9800904 	addi	r6,sp,36
    8ef8:	a80f883a 	mov	r7,r21
    8efc:	183ee83a 	callr	r3
    8f00:	103f761e 	bne	r2,zero,8cdc <___vfprintf_internal_r+0x344>
    8f04:	94800044 	addi	r18,r18,1
    8f08:	002b883a 	mov	r21,zero
    8f0c:	003ebd06 	br	8a04 <___vfprintf_internal_r+0x6c>
    8f10:	00c00044 	movi	r3,1
    8f14:	d8c01415 	stw	r3,80(sp)
    8f18:	05000404 	movi	r20,16
    8f1c:	003f7206 	br	8ce8 <___vfprintf_internal_r+0x350>
    8f20:	d9000c17 	ldw	r4,48(sp)
    8f24:	9900420e 	bge	r19,r4,9030 <___vfprintf_internal_r+0x698>
    8f28:	df000f17 	ldw	fp,60(sp)
    8f2c:	25bfffc4 	addi	r22,r4,-1
    8f30:	00800804 	movi	r2,32
    8f34:	d8800845 	stb	r2,33(sp)
    8f38:	b023883a 	mov	r17,r22
    8f3c:	057fffc4 	movi	r21,-1
    8f40:	8c7fffc4 	addi	r17,r17,-1
    8f44:	8d403926 	beq	r17,r21,902c <___vfprintf_internal_r+0x694>
    8f48:	b8800117 	ldw	r2,4(r23)
    8f4c:	e009883a 	mov	r4,fp
    8f50:	b80b883a 	mov	r5,r23
    8f54:	d9800844 	addi	r6,sp,33
    8f58:	01c00044 	movi	r7,1
    8f5c:	103ee83a 	callr	r2
    8f60:	103ff726 	beq	r2,zero,8f40 <___vfprintf_internal_r+0x5a8>
    8f64:	04bfffc4 	movi	r18,-1
    8f68:	003ec006 	br	8a6c <___vfprintf_internal_r+0xd4>
    8f6c:	d9000e17 	ldw	r4,56(sp)
    8f70:	d8c00e17 	ldw	r3,56(sp)
    8f74:	21000017 	ldw	r4,0(r4)
    8f78:	18c00104 	addi	r3,r3,4
    8f7c:	d8c00e15 	stw	r3,56(sp)
    8f80:	d9001215 	stw	r4,72(sp)
    8f84:	00089700 	call	8970 <strlen>
    8f88:	d9000c17 	ldw	r4,48(sp)
    8f8c:	102d883a 	mov	r22,r2
    8f90:	20b9c83a 	sub	fp,r4,r2
    8f94:	07001b0e 	bge	zero,fp,9004 <___vfprintf_internal_r+0x66c>
    8f98:	00800804 	movi	r2,32
    8f9c:	d8800805 	stb	r2,32(sp)
    8fa0:	b805883a 	mov	r2,r23
    8fa4:	dc001115 	stw	r16,68(sp)
    8fa8:	b02f883a 	mov	r23,r22
    8fac:	e47fffc4 	addi	r17,fp,-1
    8fb0:	902d883a 	mov	r22,r18
    8fb4:	057fffc4 	movi	r21,-1
    8fb8:	dc000f17 	ldw	r16,60(sp)
    8fbc:	1025883a 	mov	r18,r2
    8fc0:	00000206 	br	8fcc <___vfprintf_internal_r+0x634>
    8fc4:	8c7fffc4 	addi	r17,r17,-1
    8fc8:	8d400826 	beq	r17,r21,8fec <___vfprintf_internal_r+0x654>
    8fcc:	90800117 	ldw	r2,4(r18)
    8fd0:	8009883a 	mov	r4,r16
    8fd4:	900b883a 	mov	r5,r18
    8fd8:	d9800804 	addi	r6,sp,32
    8fdc:	01c00044 	movi	r7,1
    8fe0:	103ee83a 	callr	r2
    8fe4:	103ff726 	beq	r2,zero,8fc4 <___vfprintf_internal_r+0x62c>
    8fe8:	003f3c06 	br	8cdc <___vfprintf_internal_r+0x344>
    8fec:	dc001117 	ldw	r16,68(sp)
    8ff0:	9005883a 	mov	r2,r18
    8ff4:	b025883a 	mov	r18,r22
    8ff8:	9725883a 	add	r18,r18,fp
    8ffc:	b82d883a 	mov	r22,r23
    9000:	102f883a 	mov	r23,r2
    9004:	b8800117 	ldw	r2,4(r23)
    9008:	d9000f17 	ldw	r4,60(sp)
    900c:	d9801217 	ldw	r6,72(sp)
    9010:	b80b883a 	mov	r5,r23
    9014:	b00f883a 	mov	r7,r22
    9018:	103ee83a 	callr	r2
    901c:	103f2f1e 	bne	r2,zero,8cdc <___vfprintf_internal_r+0x344>
    9020:	95a5883a 	add	r18,r18,r22
    9024:	002b883a 	mov	r21,zero
    9028:	003e7606 	br	8a04 <___vfprintf_internal_r+0x6c>
    902c:	95a5883a 	add	r18,r18,r22
    9030:	d9400e17 	ldw	r5,56(sp)
    9034:	b8800117 	ldw	r2,4(r23)
    9038:	d9000f17 	ldw	r4,60(sp)
    903c:	28c00017 	ldw	r3,0(r5)
    9040:	d9800904 	addi	r6,sp,36
    9044:	b80b883a 	mov	r5,r23
    9048:	d8c00905 	stb	r3,36(sp)
    904c:	d8c00e17 	ldw	r3,56(sp)
    9050:	01c00044 	movi	r7,1
    9054:	1c400104 	addi	r17,r3,4
    9058:	103ee83a 	callr	r2
    905c:	103f1f1e 	bne	r2,zero,8cdc <___vfprintf_internal_r+0x344>
    9060:	94800044 	addi	r18,r18,1
    9064:	dc400e15 	stw	r17,56(sp)
    9068:	002b883a 	mov	r21,zero
    906c:	003e6506 	br	8a04 <___vfprintf_internal_r+0x6c>
    9070:	b8800117 	ldw	r2,4(r23)
    9074:	d9000f17 	ldw	r4,60(sp)
    9078:	00c00b44 	movi	r3,45
    907c:	d8c00905 	stb	r3,36(sp)
    9080:	b80b883a 	mov	r5,r23
    9084:	d9800904 	addi	r6,sp,36
    9088:	01c00044 	movi	r7,1
    908c:	103ee83a 	callr	r2
    9090:	103f121e 	bne	r2,zero,8cdc <___vfprintf_internal_r+0x344>
    9094:	d8c01117 	ldw	r3,68(sp)
    9098:	94800044 	addi	r18,r18,1
    909c:	00fefc16 	blt	zero,r3,8c90 <___vfprintf_internal_r+0x2f8>
    90a0:	003f5d06 	br	8e18 <___vfprintf_internal_r+0x480>
    90a4:	056bc83a 	sub	r21,zero,r21
    90a8:	d8c01215 	stw	r3,72(sp)
    90ac:	003f1406 	br	8d00 <___vfprintf_internal_r+0x368>
    90b0:	d8c01117 	ldw	r3,68(sp)
    90b4:	8805883a 	mov	r2,r17
    90b8:	dc001217 	ldw	r16,72(sp)
    90bc:	b823883a 	mov	r17,r23
    90c0:	90e5883a 	add	r18,r18,r3
    90c4:	102f883a 	mov	r23,r2
    90c8:	003f5306 	br	8e18 <___vfprintf_internal_r+0x480>

000090cc <__vfprintf_internal>:
    90cc:	00800074 	movhi	r2,1
    90d0:	10a66604 	addi	r2,r2,-26216
    90d4:	2007883a 	mov	r3,r4
    90d8:	11000017 	ldw	r4,0(r2)
    90dc:	2805883a 	mov	r2,r5
    90e0:	300f883a 	mov	r7,r6
    90e4:	180b883a 	mov	r5,r3
    90e8:	100d883a 	mov	r6,r2
    90ec:	00089981 	jmpi	8998 <___vfprintf_internal_r>

000090f0 <__sfvwrite_small_dev>:
    90f0:	2880000b 	ldhu	r2,0(r5)
    90f4:	defffa04 	addi	sp,sp,-24
    90f8:	dcc00315 	stw	r19,12(sp)
    90fc:	10c0020c 	andi	r3,r2,8
    9100:	18ffffcc 	andi	r3,r3,65535
    9104:	18e0001c 	xori	r3,r3,32768
    9108:	dc800215 	stw	r18,8(sp)
    910c:	dc400115 	stw	r17,4(sp)
    9110:	dfc00515 	stw	ra,20(sp)
    9114:	dd000415 	stw	r20,16(sp)
    9118:	dc000015 	stw	r16,0(sp)
    911c:	18e00004 	addi	r3,r3,-32768
    9120:	2825883a 	mov	r18,r5
    9124:	2027883a 	mov	r19,r4
    9128:	3023883a 	mov	r17,r6
    912c:	18002626 	beq	r3,zero,91c8 <__sfvwrite_small_dev+0xd8>
    9130:	2940008f 	ldh	r5,2(r5)
    9134:	28001016 	blt	r5,zero,9178 <__sfvwrite_small_dev+0x88>
    9138:	01c01a0e 	bge	zero,r7,91a4 <__sfvwrite_small_dev+0xb4>
    913c:	3821883a 	mov	r16,r7
    9140:	05010004 	movi	r20,1024
    9144:	00000306 	br	9154 <__sfvwrite_small_dev+0x64>
    9148:	88a3883a 	add	r17,r17,r2
    914c:	0400150e 	bge	zero,r16,91a4 <__sfvwrite_small_dev+0xb4>
    9150:	9140008f 	ldh	r5,2(r18)
    9154:	880d883a 	mov	r6,r17
    9158:	9809883a 	mov	r4,r19
    915c:	800f883a 	mov	r7,r16
    9160:	a400010e 	bge	r20,r16,9168 <__sfvwrite_small_dev+0x78>
    9164:	01c10004 	movi	r7,1024
    9168:	000928c0 	call	928c <_write_r>
    916c:	80a1c83a 	sub	r16,r16,r2
    9170:	00bff516 	blt	zero,r2,9148 <__sfvwrite_small_dev+0x58>
    9174:	9080000b 	ldhu	r2,0(r18)
    9178:	10801014 	ori	r2,r2,64
    917c:	9080000d 	sth	r2,0(r18)
    9180:	00bfffc4 	movi	r2,-1
    9184:	dfc00517 	ldw	ra,20(sp)
    9188:	dd000417 	ldw	r20,16(sp)
    918c:	dcc00317 	ldw	r19,12(sp)
    9190:	dc800217 	ldw	r18,8(sp)
    9194:	dc400117 	ldw	r17,4(sp)
    9198:	dc000017 	ldw	r16,0(sp)
    919c:	dec00604 	addi	sp,sp,24
    91a0:	f800283a 	ret
    91a4:	0005883a 	mov	r2,zero
    91a8:	dfc00517 	ldw	ra,20(sp)
    91ac:	dd000417 	ldw	r20,16(sp)
    91b0:	dcc00317 	ldw	r19,12(sp)
    91b4:	dc800217 	ldw	r18,8(sp)
    91b8:	dc400117 	ldw	r17,4(sp)
    91bc:	dc000017 	ldw	r16,0(sp)
    91c0:	dec00604 	addi	sp,sp,24
    91c4:	f800283a 	ret
    91c8:	00bfffc4 	movi	r2,-1
    91cc:	003fed06 	br	9184 <__sfvwrite_small_dev+0x94>

000091d0 <putc>:
    91d0:	defffd04 	addi	sp,sp,-12
    91d4:	00800074 	movhi	r2,1
    91d8:	10a66604 	addi	r2,r2,-26216
    91dc:	dc000115 	stw	r16,4(sp)
    91e0:	2021883a 	mov	r16,r4
    91e4:	11000017 	ldw	r4,0(r2)
    91e8:	dfc00215 	stw	ra,8(sp)
    91ec:	00800074 	movhi	r2,1
    91f0:	10a43c04 	addi	r2,r2,-28432
    91f4:	28800115 	stw	r2,4(r5)
    91f8:	d80d883a 	mov	r6,sp
    91fc:	01c00044 	movi	r7,1
    9200:	dc000005 	stb	r16,0(sp)
    9204:	103ee83a 	callr	r2
    9208:	00ffffc4 	movi	r3,-1
    920c:	10c00526 	beq	r2,r3,9224 <putc+0x54>
    9210:	8005883a 	mov	r2,r16
    9214:	dfc00217 	ldw	ra,8(sp)
    9218:	dc000117 	ldw	r16,4(sp)
    921c:	dec00304 	addi	sp,sp,12
    9220:	f800283a 	ret
    9224:	1021883a 	mov	r16,r2
    9228:	003ff906 	br	9210 <putc+0x40>

0000922c <_putc_r>:
    922c:	00800074 	movhi	r2,1
    9230:	10a66604 	addi	r2,r2,-26216
    9234:	defffd04 	addi	sp,sp,-12
    9238:	11000017 	ldw	r4,0(r2)
    923c:	dc000115 	stw	r16,4(sp)
    9240:	dfc00215 	stw	ra,8(sp)
    9244:	00800074 	movhi	r2,1
    9248:	10a43c04 	addi	r2,r2,-28432
    924c:	2821883a 	mov	r16,r5
    9250:	30800115 	stw	r2,4(r6)
    9254:	300b883a 	mov	r5,r6
    9258:	01c00044 	movi	r7,1
    925c:	d80d883a 	mov	r6,sp
    9260:	dc000005 	stb	r16,0(sp)
    9264:	103ee83a 	callr	r2
    9268:	00ffffc4 	movi	r3,-1
    926c:	10c00526 	beq	r2,r3,9284 <_putc_r+0x58>
    9270:	8005883a 	mov	r2,r16
    9274:	dfc00217 	ldw	ra,8(sp)
    9278:	dc000117 	ldw	r16,4(sp)
    927c:	dec00304 	addi	sp,sp,12
    9280:	f800283a 	ret
    9284:	1021883a 	mov	r16,r2
    9288:	003ff906 	br	9270 <_putc_r+0x44>

0000928c <_write_r>:
    928c:	defffd04 	addi	sp,sp,-12
    9290:	dc400115 	stw	r17,4(sp)
    9294:	dc000015 	stw	r16,0(sp)
    9298:	2023883a 	mov	r17,r4
    929c:	04000074 	movhi	r16,1
    92a0:	8426a804 	addi	r16,r16,-25952
    92a4:	2809883a 	mov	r4,r5
    92a8:	300b883a 	mov	r5,r6
    92ac:	380d883a 	mov	r6,r7
    92b0:	dfc00215 	stw	ra,8(sp)
    92b4:	80000015 	stw	zero,0(r16)
    92b8:	00095840 	call	9584 <write>
    92bc:	00ffffc4 	movi	r3,-1
    92c0:	10c00526 	beq	r2,r3,92d8 <_write_r+0x4c>
    92c4:	dfc00217 	ldw	ra,8(sp)
    92c8:	dc400117 	ldw	r17,4(sp)
    92cc:	dc000017 	ldw	r16,0(sp)
    92d0:	dec00304 	addi	sp,sp,12
    92d4:	f800283a 	ret
    92d8:	80c00017 	ldw	r3,0(r16)
    92dc:	183ff926 	beq	r3,zero,92c4 <_write_r+0x38>
    92e0:	88c00015 	stw	r3,0(r17)
    92e4:	dfc00217 	ldw	ra,8(sp)
    92e8:	dc400117 	ldw	r17,4(sp)
    92ec:	dc000017 	ldw	r16,0(sp)
    92f0:	dec00304 	addi	sp,sp,12
    92f4:	f800283a 	ret

000092f8 <udivmodsi4>:
    92f8:	2005883a 	mov	r2,r4
    92fc:	2900182e 	bgeu	r5,r4,9360 <udivmodsi4+0x68>
    9300:	28001716 	blt	r5,zero,9360 <udivmodsi4+0x68>
    9304:	01000804 	movi	r4,32
    9308:	00c00044 	movi	r3,1
    930c:	00000206 	br	9318 <udivmodsi4+0x20>
    9310:	20001126 	beq	r4,zero,9358 <udivmodsi4+0x60>
    9314:	28000516 	blt	r5,zero,932c <udivmodsi4+0x34>
    9318:	294b883a 	add	r5,r5,r5
    931c:	213fffc4 	addi	r4,r4,-1
    9320:	18c7883a 	add	r3,r3,r3
    9324:	28bffa36 	bltu	r5,r2,9310 <udivmodsi4+0x18>
    9328:	18000b26 	beq	r3,zero,9358 <udivmodsi4+0x60>
    932c:	0009883a 	mov	r4,zero
    9330:	11400236 	bltu	r2,r5,933c <udivmodsi4+0x44>
    9334:	1145c83a 	sub	r2,r2,r5
    9338:	20c8b03a 	or	r4,r4,r3
    933c:	1806d07a 	srli	r3,r3,1
    9340:	280ad07a 	srli	r5,r5,1
    9344:	183ffa1e 	bne	r3,zero,9330 <udivmodsi4+0x38>
    9348:	3000021e 	bne	r6,zero,9354 <udivmodsi4+0x5c>
    934c:	2005883a 	mov	r2,r4
    9350:	f800283a 	ret
    9354:	f800283a 	ret
    9358:	0009883a 	mov	r4,zero
    935c:	003ffa06 	br	9348 <udivmodsi4+0x50>
    9360:	00c00044 	movi	r3,1
    9364:	0009883a 	mov	r4,zero
    9368:	003ff106 	br	9330 <udivmodsi4+0x38>

0000936c <__divsi3>:
    936c:	defffe04 	addi	sp,sp,-8
    9370:	dfc00115 	stw	ra,4(sp)
    9374:	dc000015 	stw	r16,0(sp)
    9378:	20000a16 	blt	r4,zero,93a4 <__divsi3+0x38>
    937c:	0021883a 	mov	r16,zero
    9380:	28000b16 	blt	r5,zero,93b0 <__divsi3+0x44>
    9384:	000d883a 	mov	r6,zero
    9388:	00092f80 	call	92f8 <udivmodsi4>
    938c:	80000126 	beq	r16,zero,9394 <__divsi3+0x28>
    9390:	0085c83a 	sub	r2,zero,r2
    9394:	dfc00117 	ldw	ra,4(sp)
    9398:	dc000017 	ldw	r16,0(sp)
    939c:	dec00204 	addi	sp,sp,8
    93a0:	f800283a 	ret
    93a4:	0109c83a 	sub	r4,zero,r4
    93a8:	04000044 	movi	r16,1
    93ac:	283ff50e 	bge	r5,zero,9384 <__divsi3+0x18>
    93b0:	014bc83a 	sub	r5,zero,r5
    93b4:	8400005c 	xori	r16,r16,1
    93b8:	003ff206 	br	9384 <__divsi3+0x18>

000093bc <__modsi3>:
    93bc:	deffff04 	addi	sp,sp,-4
    93c0:	dfc00015 	stw	ra,0(sp)
    93c4:	20000516 	blt	r4,zero,93dc <__modsi3+0x20>
    93c8:	28000c16 	blt	r5,zero,93fc <__modsi3+0x40>
    93cc:	01800044 	movi	r6,1
    93d0:	dfc00017 	ldw	ra,0(sp)
    93d4:	dec00104 	addi	sp,sp,4
    93d8:	00092f81 	jmpi	92f8 <udivmodsi4>
    93dc:	0109c83a 	sub	r4,zero,r4
    93e0:	28000b16 	blt	r5,zero,9410 <__modsi3+0x54>
    93e4:	01800044 	movi	r6,1
    93e8:	00092f80 	call	92f8 <udivmodsi4>
    93ec:	0085c83a 	sub	r2,zero,r2
    93f0:	dfc00017 	ldw	ra,0(sp)
    93f4:	dec00104 	addi	sp,sp,4
    93f8:	f800283a 	ret
    93fc:	014bc83a 	sub	r5,zero,r5
    9400:	01800044 	movi	r6,1
    9404:	dfc00017 	ldw	ra,0(sp)
    9408:	dec00104 	addi	sp,sp,4
    940c:	00092f81 	jmpi	92f8 <udivmodsi4>
    9410:	014bc83a 	sub	r5,zero,r5
    9414:	003ff306 	br	93e4 <__modsi3+0x28>

00009418 <__udivsi3>:
    9418:	000d883a 	mov	r6,zero
    941c:	00092f81 	jmpi	92f8 <udivmodsi4>

00009420 <__umodsi3>:
    9420:	01800044 	movi	r6,1
    9424:	00092f81 	jmpi	92f8 <udivmodsi4>

00009428 <__mulsi3>:
    9428:	0005883a 	mov	r2,zero
    942c:	20000726 	beq	r4,zero,944c <__mulsi3+0x24>
    9430:	20c0004c 	andi	r3,r4,1
    9434:	2008d07a 	srli	r4,r4,1
    9438:	18000126 	beq	r3,zero,9440 <__mulsi3+0x18>
    943c:	1145883a 	add	r2,r2,r5
    9440:	294b883a 	add	r5,r5,r5
    9444:	203ffa1e 	bne	r4,zero,9430 <__mulsi3+0x8>
    9448:	f800283a 	ret
    944c:	f800283a 	ret

00009450 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9450:	deffff04 	addi	sp,sp,-4
    9454:	dfc00015 	stw	ra,0(sp)
    9458:	00c00074 	movhi	r3,1
    945c:	18e62c04 	addi	r3,r3,-26448
    9460:	01000074 	movhi	r4,1
    9464:	21266a04 	addi	r4,r4,-26200

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    9468:	1900061e 	bne	r3,r4,9484 <alt_load+0x34>
    946c:	00c00074 	movhi	r3,1
    9470:	18e00804 	addi	r3,r3,-32736
    9474:	01000074 	movhi	r4,1
    9478:	21200804 	addi	r4,r4,-32736
    947c:	1900151e 	bne	r3,r4,94d4 <alt_load+0x84>
    9480:	00000e06 	br	94bc <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    9484:	01400074 	movhi	r5,1
    9488:	29666a04 	addi	r5,r5,-26200
    948c:	00bfff04 	movi	r2,-4
    9490:	28cbc83a 	sub	r5,r5,r3
    9494:	288a703a 	and	r5,r5,r2
    9498:	0005883a 	mov	r2,zero
    949c:	00000506 	br	94b4 <alt_load+0x64>
    94a0:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    94a4:	39c00017 	ldw	r7,0(r7)
    94a8:	188d883a 	add	r6,r3,r2
    94ac:	10800104 	addi	r2,r2,4
    94b0:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    94b4:	117ffa1e 	bne	r2,r5,94a0 <alt_load+0x50>
    94b8:	003fec06 	br	946c <alt_load+0x1c>
    94bc:	00c00074 	movhi	r3,1
    94c0:	18e5b704 	addi	r3,r3,-26916
    94c4:	01000074 	movhi	r4,1
    94c8:	2125b704 	addi	r4,r4,-26916

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    94cc:	1900131e 	bne	r3,r4,951c <alt_load+0xcc>
    94d0:	00000e06 	br	950c <alt_load+0xbc>
    94d4:	01400074 	movhi	r5,1
    94d8:	29600804 	addi	r5,r5,-32736
    94dc:	00bfff04 	movi	r2,-4
    94e0:	28cbc83a 	sub	r5,r5,r3
    94e4:	288a703a 	and	r5,r5,r2
    94e8:	0005883a 	mov	r2,zero
    94ec:	00000506 	br	9504 <alt_load+0xb4>
    94f0:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    94f4:	39c00017 	ldw	r7,0(r7)
    94f8:	188d883a 	add	r6,r3,r2
    94fc:	10800104 	addi	r2,r2,4
    9500:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9504:	117ffa1e 	bne	r2,r5,94f0 <alt_load+0xa0>
    9508:	003fec06 	br	94bc <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    950c:	00096cc0 	call	96cc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    9510:	dfc00017 	ldw	ra,0(sp)
    9514:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    9518:	00096d01 	jmpi	96d0 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    951c:	01400074 	movhi	r5,1
    9520:	29662c04 	addi	r5,r5,-26448
    9524:	00bfff04 	movi	r2,-4
    9528:	28cbc83a 	sub	r5,r5,r3
    952c:	288a703a 	and	r5,r5,r2
    9530:	0005883a 	mov	r2,zero
    9534:	00000506 	br	954c <alt_load+0xfc>
    9538:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    953c:	39c00017 	ldw	r7,0(r7)
    9540:	188d883a 	add	r6,r3,r2
    9544:	10800104 	addi	r2,r2,4
    9548:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    954c:	117ffa1e 	bne	r2,r5,9538 <alt_load+0xe8>
    9550:	003fee06 	br	950c <alt_load+0xbc>

00009554 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9554:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9558:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    955c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9560:	00095ec0 	call	95ec <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9564:	000960c0 	call	960c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    9568:	d1204717 	ldw	r4,-32484(gp)
    956c:	d1604617 	ldw	r5,-32488(gp)
    9570:	d1a04517 	ldw	r6,-32492(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    9574:	dfc00017 	ldw	ra,0(sp)
    9578:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    957c:	00086101 	jmpi	8610 <main>

00009580 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    9580:	00096441 	jmpi	9644 <alt_busy_sleep>

00009584 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9584:	deffff04 	addi	sp,sp,-4
    9588:	dfc00015 	stw	ra,0(sp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    958c:	00800044 	movi	r2,1
    9590:	20800226 	beq	r4,r2,959c <write+0x18>
    9594:	00800084 	movi	r2,2
    9598:	2080061e 	bne	r4,r2,95b4 <write+0x30>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    959c:	01000074 	movhi	r4,1
    95a0:	21266804 	addi	r4,r4,-26208
    95a4:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    95a8:	dfc00017 	ldw	ra,0(sp)
    95ac:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    95b0:	00096101 	jmpi	9610 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    95b4:	00800074 	movhi	r2,1
    95b8:	10a66904 	addi	r2,r2,-26204
    95bc:	10800017 	ldw	r2,0(r2)
    95c0:	10000226 	beq	r2,zero,95cc <write+0x48>
    95c4:	103ee83a 	callr	r2
    95c8:	00000206 	br	95d4 <write+0x50>
    95cc:	00800074 	movhi	r2,1
    95d0:	10a6a804 	addi	r2,r2,-25952
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    95d4:	00c01444 	movi	r3,81
    95d8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    95dc:	00bfffc4 	movi	r2,-1
    95e0:	dfc00017 	ldw	ra,0(sp)
    95e4:	dec00104 	addi	sp,sp,4
    95e8:	f800283a 	ret

000095ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    95ec:	deffff04 	addi	sp,sp,-4
    95f0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, Nios);
    95f4:	00096d40 	call	96d4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    95f8:	00800044 	movi	r2,1
    95fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9600:	dfc00017 	ldw	ra,0(sp)
    9604:	dec00104 	addi	sp,sp,4
    9608:	f800283a 	ret

0000960c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    960c:	f800283a 	ret

00009610 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    9610:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9614:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    9618:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    961c:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9620:	00000606 	br	963c <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9624:	31c00037 	ldwio	r7,0(r6)
    9628:	39ffffec 	andhi	r7,r7,65535
    962c:	383ffd26 	beq	r7,zero,9624 <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9630:	29c00007 	ldb	r7,0(r5)
    9634:	29400044 	addi	r5,r5,1
    9638:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    963c:	293ff936 	bltu	r5,r4,9624 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    9640:	f800283a 	ret

00009644 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9644:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9648:	014666b4 	movhi	r5,6554
    964c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9650:	dc000015 	stw	r16,0(sp)
    9654:	dfc00115 	stw	ra,4(sp)
    9658:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    965c:	00094180 	call	9418 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    9660:	10001026 	beq	r2,zero,96a4 <alt_busy_sleep+0x60>
    9664:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9668:	01600034 	movhi	r5,32768
    966c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9670:	013999b4 	movhi	r4,58982
    9674:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9678:	297fffc4 	addi	r5,r5,-1
    967c:	283ffe1e 	bne	r5,zero,9678 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9680:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9684:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9688:	18bffb16 	blt	r3,r2,9678 <alt_busy_sleep+0x34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    968c:	8009883a 	mov	r4,r16
    9690:	01400144 	movi	r5,5
    9694:	00094280 	call	9428 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9698:	10bfffc4 	addi	r2,r2,-1
    969c:	103ffe1e 	bne	r2,zero,9698 <alt_busy_sleep+0x54>
    96a0:	00000506 	br	96b8 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    96a4:	8009883a 	mov	r4,r16
    96a8:	01400144 	movi	r5,5
    96ac:	00094280 	call	9428 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    96b0:	10bfffc4 	addi	r2,r2,-1
    96b4:	00bffe16 	blt	zero,r2,96b0 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    96b8:	0005883a 	mov	r2,zero
    96bc:	dfc00117 	ldw	ra,4(sp)
    96c0:	dc000017 	ldw	r16,0(sp)
    96c4:	dec00204 	addi	sp,sp,8
    96c8:	f800283a 	ret

000096cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    96cc:	f800283a 	ret

000096d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    96d0:	f800283a 	ret

000096d4 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    96d4:	000170fa 	wrctl	ienable,zero
    96d8:	f800283a 	ret
