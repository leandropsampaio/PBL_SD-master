
ProjetoPbl2.elf:     file format elf32-littlenios2
ProjetoPbl2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000a68 memsz 0x00000a68 flags r-x
    LOAD off    0x00001a88 vaddr 0x00008a88 paddr 0x00008b80 align 2**12
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x00001c78 vaddr 0x00008c78 paddr 0x00008c78 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000a00  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  00008a20  00008a20  00001a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f8  00008a88  00008b80  00001a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00008c78  00008c78  00001c78  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d8  00000000  00000000  00001ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a08  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013bf  00000000  00000000  00005888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000173e  00000000  00000000  00006c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003c8  00000000  00000000  00008388  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e48  00000000  00000000  00008750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d5f  00000000  00000000  00009598  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000040  00000000  00000000  0000a2f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000098  00000000  00000000  0000a338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000b4da  2**0
                  CONTENTS, READONLY
 16 .cpu          00000004  00000000  00000000  0000b4dd  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000b4e1  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000b4e2  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  0000b4e3  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  0000b4ee  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  0000b4f9  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000004  00000000  00000000  0000b504  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000032  00000000  00000000  0000b508  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00065ec0  00000000  00000000  0000b53a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00008a20 l    d  .rodata	00000000 .rodata
00008a88 l    d  .rwdata	00000000 .rwdata
00008c78 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ProjetoPbl2_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 impure.c
00008a88 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000088c8 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 
000083f0 g     F .text	0000001c putchar
00008740 g     F .text	0000002c alt_main
00008b80 g       *ABS*	00000000 __flash_rwdata_start
00008108 g     F .text	00000044 read_uart
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000814c g     F .text	00000068 acenderLeds
00008c78 g     O .bss	00000004 errno
00008c80 g     O .bss	00000004 alt_argv
00010b68 g       *ABS*	00000000 _gp
0000876c g     F .text	00000004 usleep
000083e8 g     F .text	00000008 _putchar_r
000083c0 g     F .text	00000028 memcpy
000089e8 g     F .text	00000008 __udivsi3
00008b74 g     O .rwdata	00000004 UART_1
00008b6c g     O .rwdata	00000004 _global_impure_ptr
00008c88 g       *ABS*	00000000 __bss_end
000088b8 g     F .text	00000004 alt_dcache_flush_all
00008b80 g       *ABS*	00000000 __ram_rwdata_end
00008770 g     F .text	00000068 write
00008490 g     F .text	00000060 _putc_r
00008a88 g       *ABS*	00000000 __ram_rodata_end
00008b78 g     O .rwdata	00000004 jtag_uart_0
000089f0 g     F .text	00000008 __umodsi3
00008c88 g       *ABS*	00000000 end
000081b4 g     F .text	00000094 printalcd
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000087fc g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000087f8 g     F .text	00000004 alt_sys_init
000089f8 g     F .text	00000028 __mulsi3
00008a88 g       *ABS*	00000000 __ram_rwdata_start
00008a20 g       *ABS*	00000000 __ram_rodata_start
0000805c g     F .text	000000ac write_uart
00008830 g     F .text	00000088 alt_busy_sleep
00008b68 g     O .rwdata	00000001 button_value
00008c88 g       *ABS*	00000000 __alt_stack_base
000084f0 g     F .text	000000e0 __sfvwrite_small_dev
00008c78 g       *ABS*	00000000 __bss_start
00008248 g     F .text	000000c0 lcd_init
00008308 g     F .text	000000b8 main
00008c7c g     O .bss	00000004 alt_envp
00008b7c g     O .rwdata	00000004 alt_errno
00008434 g     F .text	0000005c putc
0000893c g     F .text	00000050 __divsi3
00008a20 g       *ABS*	00000000 __flash_rodata_start
000087d8 g     F .text	00000020 alt_irq_init
000085d0 g     F .text	0000006c _write_r
00008b70 g     O .rwdata	00000004 _impure_ptr
00008c84 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008b80 g       *ABS*	00000000 _edata
00008c88 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_mem_memory
000088c0 g     F .text	00000008 altera_nios2_qsys_irq_init
0000898c g     F .text	0000005c __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
0000840c g     F .text	00000028 strlen
000088bc g     F .text	00000004 alt_icache_flush_all
0000863c g     F .text	00000104 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d682da14 	ori	gp,gp,2920
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a31e14 	ori	r2,r2,35960

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e32214 	ori	r3,r3,35976

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000863c0 	call	863c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00087400 	call	8740 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <write_uart>:
#define UP_BUTTON 1
#define DOWN_BUTTON 2


void write_uart(int tamanho, char *comando)
{
    805c:	defffa04 	addi	sp,sp,-24
    8060:	dcc00315 	stw	r19,12(sp)
    8064:	dc800215 	stw	r18,8(sp)
    8068:	dfc00515 	stw	ra,20(sp)
    806c:	dd000415 	stw	r20,16(sp)
    8070:	dc400115 	stw	r17,4(sp)
    8074:	dc000015 	stw	r16,0(sp)
    8078:	2027883a 	mov	r19,r4
    807c:	2825883a 	mov	r18,r5
    unsigned long status = 0;
    8080:	0005883a 	mov	r2,zero
    int i;
    // acenderLeds(1, 0);
    // Verifica até que seja possível a transmissão de dados
    while((status & 0x00000040) != 0x00000040)
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    8084:	00c00074 	movhi	r3,1
    8088:	18c40204 	addi	r3,r3,4104
{
    unsigned long status = 0;
    int i;
    // acenderLeds(1, 0);
    // Verifica até que seja possível a transmissão de dados
    while((status & 0x00000040) != 0x00000040)
    808c:	00000106 	br	8094 <write_uart+0x38>
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    8090:	18800037 	ldwio	r2,0(r3)
{
    unsigned long status = 0;
    int i;
    // acenderLeds(1, 0);
    // Verifica até que seja possível a transmissão de dados
    while((status & 0x00000040) != 0x00000040)
    8094:	1080100c 	andi	r2,r2,64
    8098:	103ffd26 	beq	r2,zero,8090 <write_uart+0x34>
    809c:	9021883a 	mov	r16,r18
    80a0:	05000074 	movhi	r20,1
    80a4:	a5040104 	addi	r20,r20,4100
    80a8:	00000506 	br	80c0 <write_uart+0x64>
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    }

    for (i = 0; i < tamanho; i++) {
    	IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, comando[i]);
    80ac:	80800007 	ldb	r2,0(r16)
    80b0:	a0800035 	stwio	r2,0(r20)
    	usleep(1000);
    80b4:	0100fa04 	movi	r4,1000
    80b8:	000876c0 	call	876c <usleep>
    80bc:	84000044 	addi	r16,r16,1
char button_value = 3;
#define UP_BUTTON 1
#define DOWN_BUTTON 2


void write_uart(int tamanho, char *comando)
    80c0:	8485c83a 	sub	r2,r16,r18
    80c4:	04400074 	movhi	r17,1
    80c8:	8c440104 	addi	r17,r17,4100
    while((status & 0x00000040) != 0x00000040)
    {
        status = IORD_ALTERA_AVALON_UART_STATUS(UART_1_BASE);
    }

    for (i = 0; i < tamanho; i++) {
    80cc:	14fff716 	blt	r2,r19,80ac <write_uart+0x50>
    	IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, comando[i]);
    	usleep(1000);
    }
    IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, '\r');
    80d0:	00800344 	movi	r2,13
    80d4:	88800035 	stwio	r2,0(r17)
    usleep(1000);
    80d8:	0100fa04 	movi	r4,1000
    80dc:	000876c0 	call	876c <usleep>
    IOWR_ALTERA_AVALON_UART_TXDATA(UART_1_BASE, '\n');
    80e0:	00800284 	movi	r2,10
    80e4:	88800035 	stwio	r2,0(r17)

}
    80e8:	dfc00517 	ldw	ra,20(sp)
    80ec:	dd000417 	ldw	r20,16(sp)
    80f0:	dcc00317 	ldw	r19,12(sp)
    80f4:	dc800217 	ldw	r18,8(sp)
    80f8:	dc400117 	ldw	r17,4(sp)
    80fc:	dc000017 	ldw	r16,0(sp)
    8100:	dec00604 	addi	sp,sp,24
    8104:	f800283a 	ret

00008108 <read_uart>:

char read_uart()
{
    8108:	defffd04 	addi	sp,sp,-12
    810c:	dc400115 	stw	r17,4(sp)
    8110:	dc000015 	stw	r16,0(sp)
    8114:	dfc00215 	stw	ra,8(sp)
	char data;
    while(1){
    	if(IORD_ALTERA_AVALON_UART_STATUS( UART_1_BASE ) & 0x80 ) {
    8118:	04400074 	movhi	r17,1
    811c:	8c440204 	addi	r17,r17,4104
    		data = IORD_ALTERA_AVALON_UART_RXDATA( UART_1_BASE );
    8120:	04000074 	movhi	r16,1
    8124:	84040004 	addi	r16,r16,4096

char read_uart()
{
	char data;
    while(1){
    	if(IORD_ALTERA_AVALON_UART_STATUS( UART_1_BASE ) & 0x80 ) {
    8128:	88800037 	ldwio	r2,0(r17)
    812c:	1080200c 	andi	r2,r2,128
    8130:	103ffd26 	beq	r2,zero,8128 <read_uart+0x20>
    		data = IORD_ALTERA_AVALON_UART_RXDATA( UART_1_BASE );
    8134:	81000037 	ldwio	r4,0(r16)
	        printf("%c",data);
    8138:	21003fcc 	andi	r4,r4,255
    813c:	2100201c 	xori	r4,r4,128
    8140:	213fe004 	addi	r4,r4,-128
    8144:	00083f00 	call	83f0 <putchar>
    8148:	003ff706 	br	8128 <read_uart+0x20>

0000814c <acenderLeds>:
    	}
	}
}

void acenderLeds(int opcao, int nivelLogico) {
	if (opcao == 1) {
    814c:	00800044 	movi	r2,1
    8150:	2080031e 	bne	r4,r2,8160 <acenderLeds+0x14>
		IOWR_ALTERA_AVALON_PIO_DATA(LED1_BASE, nivelLogico);
    8154:	00800074 	movhi	r2,1
    8158:	10842804 	addi	r2,r2,4256
    815c:	00001306 	br	81ac <acenderLeds+0x60>
	} else if (opcao == 2) {
    8160:	00800084 	movi	r2,2
    8164:	2080031e 	bne	r4,r2,8174 <acenderLeds+0x28>
		IOWR_ALTERA_AVALON_PIO_DATA(LED2_BASE, nivelLogico);
    8168:	00800074 	movhi	r2,1
    816c:	10842004 	addi	r2,r2,4224
    8170:	00000e06 	br	81ac <acenderLeds+0x60>
	} else if (opcao == 3) {
    8174:	008000c4 	movi	r2,3
    8178:	2080031e 	bne	r4,r2,8188 <acenderLeds+0x3c>
		IOWR_ALTERA_AVALON_PIO_DATA(LED3_BASE, nivelLogico);
    817c:	00800074 	movhi	r2,1
    8180:	10841c04 	addi	r2,r2,4208
    8184:	00000906 	br	81ac <acenderLeds+0x60>
	} else if (opcao == 4) {
    8188:	00800104 	movi	r2,4
    818c:	2080031e 	bne	r4,r2,819c <acenderLeds+0x50>
		IOWR_ALTERA_AVALON_PIO_DATA(LED4_BASE, nivelLogico);
    8190:	00800074 	movhi	r2,1
    8194:	10841804 	addi	r2,r2,4192
    8198:	00000406 	br	81ac <acenderLeds+0x60>
	} else if (opcao == 5) {
    819c:	00800144 	movi	r2,5
    81a0:	2080031e 	bne	r4,r2,81b0 <acenderLeds+0x64>
		IOWR_ALTERA_AVALON_PIO_DATA(LED5_BASE, nivelLogico);
    81a4:	00800074 	movhi	r2,1
    81a8:	10841404 	addi	r2,r2,4176
    81ac:	11400035 	stwio	r5,0(r2)
    81b0:	f800283a 	ret

000081b4 <printalcd>:
}

/*
 * Função para escrever palavras no LCD
 */
void printalcd(char word[][16], int lugar) {
    81b4:	defffb04 	addi	sp,sp,-20
    81b8:	dc800215 	stw	r18,8(sp)
    81bc:	dc400115 	stw	r17,4(sp)
    81c0:	2025883a 	mov	r18,r4
    81c4:	2823883a 	mov	r17,r5
	lugar = lugar - 1;

	int i;
	/* Set the Cursor to the home position */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
    81c8:	00800084 	movi	r2,2
}

/*
 * Função para escrever palavras no LCD
 */
void printalcd(char word[][16], int lugar) {
    81cc:	dfc00415 	stw	ra,16(sp)
    81d0:	dcc00315 	stw	r19,12(sp)
    81d4:	dc000015 	stw	r16,0(sp)
	lugar = lugar - 1;

	int i;
	/* Set the Cursor to the home position */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
    81d8:	0085c032 	custom	0,r2,zero,r2
	usleep(2000);
    81dc:	0101f404 	movi	r4,2000
    81e0:	000876c0 	call	876c <usleep>

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
    81e4:	04c00044 	movi	r19,1
    81e8:	04c5c032 	custom	0,r2,zero,r19

/*
 * Função para escrever palavras no LCD
 */
void printalcd(char word[][16], int lugar) {
	lugar = lugar - 1;
    81ec:	8c7fffc4 	addi	r17,r17,-1
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);
	//printf("%i",strlen(word));
	for (i = 0; i < strlen(word); i++) {
		//printf("PALAVRA: %c \n", word[lugar][i]);
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
    81f0:	8822913a 	slli	r17,r17,4
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
	usleep(2000);

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);
    81f4:	0101f404 	movi	r4,2000
    81f8:	000876c0 	call	876c <usleep>
	//printf("%i",strlen(word));
	for (i = 0; i < strlen(word); i++) {
		//printf("PALAVRA: %c \n", word[lugar][i]);
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
    81fc:	9463883a 	add	r17,r18,r17

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);
	//printf("%i",strlen(word));
	for (i = 0; i < strlen(word); i++) {
    8200:	8821883a 	mov	r16,r17
    8204:	00000506 	br	821c <printalcd+0x68>
		//printf("PALAVRA: %c \n", word[lugar][i]);
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
    8208:	80800007 	ldb	r2,0(r16)
    820c:	9885c032 	custom	0,r2,r19,r2
		usleep(100);
    8210:	01001904 	movi	r4,100
    8214:	000876c0 	call	876c <usleep>
    8218:	84000044 	addi	r16,r16,1

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);
	//printf("%i",strlen(word));
	for (i = 0; i < strlen(word); i++) {
    821c:	9009883a 	mov	r4,r18
    8220:	000840c0 	call	840c <strlen>
}

/*
 * Função para escrever palavras no LCD
 */
void printalcd(char word[][16], int lugar) {
    8224:	8447c83a 	sub	r3,r16,r17

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);
	//printf("%i",strlen(word));
	for (i = 0; i < strlen(word); i++) {
    8228:	18bff736 	bltu	r3,r2,8208 <printalcd+0x54>
		//printf("PALAVRA: %c \n", word[lugar][i]);
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
		usleep(100);
	}
}
    822c:	dfc00417 	ldw	ra,16(sp)
    8230:	dcc00317 	ldw	r19,12(sp)
    8234:	dc800217 	ldw	r18,8(sp)
    8238:	dc400117 	ldw	r17,4(sp)
    823c:	dc000017 	ldw	r16,0(sp)
    8240:	dec00504 	addi	sp,sp,20
    8244:	f800283a 	ret

00008248 <lcd_init>:

void lcd_init(void) {
    8248:	defffc04 	addi	sp,sp,-16
	usleep(15000); /* Wait for more than 15 ms before init */
    824c:	010ea604 	movi	r4,15000
		ALT_CI_LCD_0(LCD_WR_DATA_REG, word[lugar][i]);
		usleep(100);
	}
}

void lcd_init(void) {
    8250:	dc800215 	stw	r18,8(sp)
    8254:	dc000015 	stw	r16,0(sp)
    8258:	dfc00315 	stw	ra,12(sp)
    825c:	dc400115 	stw	r17,4(sp)
	usleep(15000); /* Wait for more than 15 ms before init */
	/* Set function code four times -- 8-bit, 2 line, 5x7 mode */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    8260:	0021883a 	mov	r16,zero
		usleep(100);
	}
}

void lcd_init(void) {
	usleep(15000); /* Wait for more than 15 ms before init */
    8264:	000876c0 	call	876c <usleep>
	/* Set function code four times -- 8-bit, 2 line, 5x7 mode */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    8268:	04800e04 	movi	r18,56
    826c:	8485c032 	custom	0,r2,r16,r18
	usleep(4100); /* Wait for more than 4.1 ms */
    8270:	01040104 	movi	r4,4100
    8274:	000876c0 	call	876c <usleep>
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    8278:	8485c032 	custom	0,r2,r16,r18
	usleep(100); /* Wait for more than 100 us */
    827c:	04401904 	movi	r17,100
    8280:	8809883a 	mov	r4,r17
    8284:	000876c0 	call	876c <usleep>
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    8288:	8485c032 	custom	0,r2,r16,r18
	usleep(5000); /* Wait for more than 100 us */
    828c:	0104e204 	movi	r4,5000
    8290:	000876c0 	call	876c <usleep>
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x38);
    8294:	84a5c032 	custom	0,r18,r16,r18
	usleep(100); /* Wait for more than 100 us */
    8298:	8809883a 	mov	r4,r17
    829c:	000876c0 	call	876c <usleep>

	/* Set Display to OFF*/
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x08);
    82a0:	00800204 	movi	r2,8
    82a4:	8085c032 	custom	0,r2,r16,r2
	usleep(100);
    82a8:	8809883a 	mov	r4,r17
    82ac:	000876c0 	call	876c <usleep>

	/* Set Display to ON */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x0C);
    82b0:	00800304 	movi	r2,12
    82b4:	8085c032 	custom	0,r2,r16,r2
	usleep(100);
    82b8:	8809883a 	mov	r4,r17
    82bc:	000876c0 	call	876c <usleep>

	/* Set Entry Mode -- Cursor increment, display doesn't shift */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x06);
    82c0:	00800184 	movi	r2,6
    82c4:	8085c032 	custom	0,r2,r16,r2
	usleep(100);
    82c8:	8809883a 	mov	r4,r17
    82cc:	000876c0 	call	876c <usleep>

	/* Set the Cursor to the home position */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
    82d0:	00800084 	movi	r2,2
    82d4:	8085c032 	custom	0,r2,r16,r2
	usleep(2000);
    82d8:	0441f404 	movi	r17,2000
    82dc:	8809883a 	mov	r4,r17
    82e0:	000876c0 	call	876c <usleep>

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
    82e4:	00800044 	movi	r2,1
    82e8:	80a1c032 	custom	0,r16,r16,r2
	usleep(2000);
    82ec:	8809883a 	mov	r4,r17
}
    82f0:	dfc00317 	ldw	ra,12(sp)
    82f4:	dc800217 	ldw	r18,8(sp)
    82f8:	dc400117 	ldw	r17,4(sp)
    82fc:	dc000017 	ldw	r16,0(sp)
    8300:	dec00404 	addi	sp,sp,16
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x02);
	usleep(2000);

	/* Display clear */
	ALT_CI_LCD_0(LCD_WR_COMMAND_REG, 0x01);
	usleep(2000);
    8304:	000876c1 	jmpi	876c <usleep>

00008308 <main>:
}

int main() {
    8308:	deffe404 	addi	sp,sp,-112
    830c:	dfc01b15 	stw	ra,108(sp)
    8310:	dc001a15 	stw	r16,104(sp)
	int sw_value, sw_value1, sw_value2, sw_value3;
	int opcao = 1;
	int entrouOpcao = 0, liberado = 1;

	// INICIALIZAÇÃO DO LCD
	lcd_init();
    8314:	00082480 	call	8248 <lcd_init>
	char bemVindo[1][16] = { " SEJA BEM VINDO" };
    8318:	d9001404 	addi	r4,sp,80
    831c:	01400074 	movhi	r5,1
    8320:	29628804 	addi	r5,r5,-30176
    8324:	01800404 	movi	r6,16
    8328:	00083c00 	call	83c0 <memcpy>
	char options[5][16] = { "1 opcao", "2 opcao", "3 opcao", "4 opcao",
    832c:	d809883a 	mov	r4,sp
    8330:	01400074 	movhi	r5,1
    8334:	29628c04 	addi	r5,r5,-30160
    8338:	01801404 	movi	r6,80
    833c:	00083c00 	call	83c0 <memcpy>
	char options2[5][16] = { "Entrou no 1", "Entrou no 2", "Entrou no 3",
			"Entrou no 4", "Entrou no 5" };
	// Enviando palavra para ser exibida no LCD

	// Desligar todos os LEDS
	IOWR_ALTERA_AVALON_PIO_DATA(LED1_BASE, 1);
    8340:	04000044 	movi	r16,1
    8344:	00800074 	movhi	r2,1
    8348:	10842804 	addi	r2,r2,4256
    834c:	14000035 	stwio	r16,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED2_BASE, 1);
    8350:	10bff804 	addi	r2,r2,-32
    8354:	14000035 	stwio	r16,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED3_BASE, 1);
    8358:	10bffc04 	addi	r2,r2,-16
    835c:	14000035 	stwio	r16,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED4_BASE, 1);
    8360:	10bffc04 	addi	r2,r2,-16
    8364:	14000035 	stwio	r16,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED5_BASE, 1);
    8368:	10bffc04 	addi	r2,r2,-16
    836c:	14000035 	stwio	r16,0(r2)

	printalcd(bemVindo, opcao);
    8370:	800b883a 	mov	r5,r16
    8374:	d9001404 	addi	r4,sp,80
    8378:	00081b40 	call	81b4 <printalcd>
	usleep(2000000);
    837c:	010007f4 	movhi	r4,31
    8380:	21212004 	addi	r4,r4,-31616
    8384:	000876c0 	call	876c <usleep>
	printalcd(options, opcao);
    8388:	d809883a 	mov	r4,sp
    838c:	800b883a 	mov	r5,r16
    8390:	00081b40 	call	81b4 <printalcd>

//_____________________________________________________

	char comando[] = "AT+GMR";
    8394:	01400074 	movhi	r5,1
    8398:	2962a004 	addi	r5,r5,-30080
    839c:	018001c4 	movi	r6,7
    83a0:	d9001804 	addi	r4,sp,96
    83a4:	00083c00 	call	83c0 <memcpy>
	char resposta;
	//printf("%d",strlen(comando));
	write_uart(strlen(comando), comando);
    83a8:	d9001804 	addi	r4,sp,96
    83ac:	000840c0 	call	840c <strlen>
    83b0:	1009883a 	mov	r4,r2
    83b4:	d9401804 	addi	r5,sp,96
    83b8:	000805c0 	call	805c <write_uart>
	read_uart();
    83bc:	00081080 	call	8108 <read_uart>

000083c0 <memcpy>:
    83c0:	2005883a 	mov	r2,r4
    83c4:	30000726 	beq	r6,zero,83e4 <memcpy+0x24>
    83c8:	218d883a 	add	r6,r4,r6
    83cc:	2007883a 	mov	r3,r4
    83d0:	29c00003 	ldbu	r7,0(r5)
    83d4:	18c00044 	addi	r3,r3,1
    83d8:	29400044 	addi	r5,r5,1
    83dc:	19ffffc5 	stb	r7,-1(r3)
    83e0:	19bffb1e 	bne	r3,r6,83d0 <memcpy+0x10>
    83e4:	f800283a 	ret

000083e8 <_putchar_r>:
    83e8:	21800217 	ldw	r6,8(r4)
    83ec:	00084901 	jmpi	8490 <_putc_r>

000083f0 <putchar>:
    83f0:	00800074 	movhi	r2,1
    83f4:	10a2dc04 	addi	r2,r2,-29840
    83f8:	10800017 	ldw	r2,0(r2)
    83fc:	200b883a 	mov	r5,r4
    8400:	11800217 	ldw	r6,8(r2)
    8404:	1009883a 	mov	r4,r2
    8408:	00084901 	jmpi	8490 <_putc_r>

0000840c <strlen>:
    840c:	20800007 	ldb	r2,0(r4)
    8410:	10000626 	beq	r2,zero,842c <strlen+0x20>
    8414:	2005883a 	mov	r2,r4
    8418:	10800044 	addi	r2,r2,1
    841c:	10c00007 	ldb	r3,0(r2)
    8420:	183ffd1e 	bne	r3,zero,8418 <strlen+0xc>
    8424:	1105c83a 	sub	r2,r2,r4
    8428:	f800283a 	ret
    842c:	0005883a 	mov	r2,zero
    8430:	f800283a 	ret

00008434 <putc>:
    8434:	defffd04 	addi	sp,sp,-12
    8438:	00800074 	movhi	r2,1
    843c:	10a2dc04 	addi	r2,r2,-29840
    8440:	dc000115 	stw	r16,4(sp)
    8444:	2021883a 	mov	r16,r4
    8448:	11000017 	ldw	r4,0(r2)
    844c:	dfc00215 	stw	ra,8(sp)
    8450:	00800074 	movhi	r2,1
    8454:	10a13c04 	addi	r2,r2,-31504
    8458:	28800115 	stw	r2,4(r5)
    845c:	d80d883a 	mov	r6,sp
    8460:	01c00044 	movi	r7,1
    8464:	dc000005 	stb	r16,0(sp)
    8468:	103ee83a 	callr	r2
    846c:	00ffffc4 	movi	r3,-1
    8470:	10c00526 	beq	r2,r3,8488 <putc+0x54>
    8474:	8005883a 	mov	r2,r16
    8478:	dfc00217 	ldw	ra,8(sp)
    847c:	dc000117 	ldw	r16,4(sp)
    8480:	dec00304 	addi	sp,sp,12
    8484:	f800283a 	ret
    8488:	1021883a 	mov	r16,r2
    848c:	003ff906 	br	8474 <putc+0x40>

00008490 <_putc_r>:
    8490:	00800074 	movhi	r2,1
    8494:	10a2dc04 	addi	r2,r2,-29840
    8498:	defffd04 	addi	sp,sp,-12
    849c:	11000017 	ldw	r4,0(r2)
    84a0:	dc000115 	stw	r16,4(sp)
    84a4:	dfc00215 	stw	ra,8(sp)
    84a8:	00800074 	movhi	r2,1
    84ac:	10a13c04 	addi	r2,r2,-31504
    84b0:	2821883a 	mov	r16,r5
    84b4:	30800115 	stw	r2,4(r6)
    84b8:	300b883a 	mov	r5,r6
    84bc:	01c00044 	movi	r7,1
    84c0:	d80d883a 	mov	r6,sp
    84c4:	dc000005 	stb	r16,0(sp)
    84c8:	103ee83a 	callr	r2
    84cc:	00ffffc4 	movi	r3,-1
    84d0:	10c00526 	beq	r2,r3,84e8 <_putc_r+0x58>
    84d4:	8005883a 	mov	r2,r16
    84d8:	dfc00217 	ldw	ra,8(sp)
    84dc:	dc000117 	ldw	r16,4(sp)
    84e0:	dec00304 	addi	sp,sp,12
    84e4:	f800283a 	ret
    84e8:	1021883a 	mov	r16,r2
    84ec:	003ff906 	br	84d4 <_putc_r+0x44>

000084f0 <__sfvwrite_small_dev>:
    84f0:	2880000b 	ldhu	r2,0(r5)
    84f4:	defffa04 	addi	sp,sp,-24
    84f8:	dcc00315 	stw	r19,12(sp)
    84fc:	10c0020c 	andi	r3,r2,8
    8500:	18ffffcc 	andi	r3,r3,65535
    8504:	18e0001c 	xori	r3,r3,32768
    8508:	dc800215 	stw	r18,8(sp)
    850c:	dc400115 	stw	r17,4(sp)
    8510:	dfc00515 	stw	ra,20(sp)
    8514:	dd000415 	stw	r20,16(sp)
    8518:	dc000015 	stw	r16,0(sp)
    851c:	18e00004 	addi	r3,r3,-32768
    8520:	2825883a 	mov	r18,r5
    8524:	2027883a 	mov	r19,r4
    8528:	3023883a 	mov	r17,r6
    852c:	18002626 	beq	r3,zero,85c8 <__sfvwrite_small_dev+0xd8>
    8530:	2940008f 	ldh	r5,2(r5)
    8534:	28001016 	blt	r5,zero,8578 <__sfvwrite_small_dev+0x88>
    8538:	01c01a0e 	bge	zero,r7,85a4 <__sfvwrite_small_dev+0xb4>
    853c:	3821883a 	mov	r16,r7
    8540:	05010004 	movi	r20,1024
    8544:	00000306 	br	8554 <__sfvwrite_small_dev+0x64>
    8548:	88a3883a 	add	r17,r17,r2
    854c:	0400150e 	bge	zero,r16,85a4 <__sfvwrite_small_dev+0xb4>
    8550:	9140008f 	ldh	r5,2(r18)
    8554:	880d883a 	mov	r6,r17
    8558:	9809883a 	mov	r4,r19
    855c:	800f883a 	mov	r7,r16
    8560:	a400010e 	bge	r20,r16,8568 <__sfvwrite_small_dev+0x78>
    8564:	01c10004 	movi	r7,1024
    8568:	00085d00 	call	85d0 <_write_r>
    856c:	80a1c83a 	sub	r16,r16,r2
    8570:	00bff516 	blt	zero,r2,8548 <__sfvwrite_small_dev+0x58>
    8574:	9080000b 	ldhu	r2,0(r18)
    8578:	10801014 	ori	r2,r2,64
    857c:	9080000d 	sth	r2,0(r18)
    8580:	00bfffc4 	movi	r2,-1
    8584:	dfc00517 	ldw	ra,20(sp)
    8588:	dd000417 	ldw	r20,16(sp)
    858c:	dcc00317 	ldw	r19,12(sp)
    8590:	dc800217 	ldw	r18,8(sp)
    8594:	dc400117 	ldw	r17,4(sp)
    8598:	dc000017 	ldw	r16,0(sp)
    859c:	dec00604 	addi	sp,sp,24
    85a0:	f800283a 	ret
    85a4:	0005883a 	mov	r2,zero
    85a8:	dfc00517 	ldw	ra,20(sp)
    85ac:	dd000417 	ldw	r20,16(sp)
    85b0:	dcc00317 	ldw	r19,12(sp)
    85b4:	dc800217 	ldw	r18,8(sp)
    85b8:	dc400117 	ldw	r17,4(sp)
    85bc:	dc000017 	ldw	r16,0(sp)
    85c0:	dec00604 	addi	sp,sp,24
    85c4:	f800283a 	ret
    85c8:	00bfffc4 	movi	r2,-1
    85cc:	003fed06 	br	8584 <__sfvwrite_small_dev+0x94>

000085d0 <_write_r>:
    85d0:	defffd04 	addi	sp,sp,-12
    85d4:	dc400115 	stw	r17,4(sp)
    85d8:	dc000015 	stw	r16,0(sp)
    85dc:	2023883a 	mov	r17,r4
    85e0:	04000074 	movhi	r16,1
    85e4:	84231e04 	addi	r16,r16,-29576
    85e8:	2809883a 	mov	r4,r5
    85ec:	300b883a 	mov	r5,r6
    85f0:	380d883a 	mov	r6,r7
    85f4:	dfc00215 	stw	ra,8(sp)
    85f8:	80000015 	stw	zero,0(r16)
    85fc:	00087700 	call	8770 <write>
    8600:	00ffffc4 	movi	r3,-1
    8604:	10c00526 	beq	r2,r3,861c <_write_r+0x4c>
    8608:	dfc00217 	ldw	ra,8(sp)
    860c:	dc400117 	ldw	r17,4(sp)
    8610:	dc000017 	ldw	r16,0(sp)
    8614:	dec00304 	addi	sp,sp,12
    8618:	f800283a 	ret
    861c:	80c00017 	ldw	r3,0(r16)
    8620:	183ff926 	beq	r3,zero,8608 <_write_r+0x38>
    8624:	88c00015 	stw	r3,0(r17)
    8628:	dfc00217 	ldw	ra,8(sp)
    862c:	dc400117 	ldw	r17,4(sp)
    8630:	dc000017 	ldw	r16,0(sp)
    8634:	dec00304 	addi	sp,sp,12
    8638:	f800283a 	ret

0000863c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    863c:	deffff04 	addi	sp,sp,-4
    8640:	dfc00015 	stw	ra,0(sp)
    8644:	00c00074 	movhi	r3,1
    8648:	18e2a204 	addi	r3,r3,-30072
    864c:	01000074 	movhi	r4,1
    8650:	2122e004 	addi	r4,r4,-29824

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8654:	1900061e 	bne	r3,r4,8670 <alt_load+0x34>
    8658:	00c00074 	movhi	r3,1
    865c:	18e00804 	addi	r3,r3,-32736
    8660:	01000074 	movhi	r4,1
    8664:	21200804 	addi	r4,r4,-32736
    8668:	1900151e 	bne	r3,r4,86c0 <alt_load+0x84>
    866c:	00000e06 	br	86a8 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    8670:	01400074 	movhi	r5,1
    8674:	2962e004 	addi	r5,r5,-29824
    8678:	00bfff04 	movi	r2,-4
    867c:	28cbc83a 	sub	r5,r5,r3
    8680:	288a703a 	and	r5,r5,r2
    8684:	0005883a 	mov	r2,zero
    8688:	00000506 	br	86a0 <alt_load+0x64>
    868c:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    8690:	39c00017 	ldw	r7,0(r7)
    8694:	188d883a 	add	r6,r3,r2
    8698:	10800104 	addi	r2,r2,4
    869c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    86a0:	117ffa1e 	bne	r2,r5,868c <alt_load+0x50>
    86a4:	003fec06 	br	8658 <alt_load+0x1c>
    86a8:	00c00074 	movhi	r3,1
    86ac:	18e28804 	addi	r3,r3,-30176
    86b0:	01000074 	movhi	r4,1
    86b4:	21228804 	addi	r4,r4,-30176

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    86b8:	1900131e 	bne	r3,r4,8708 <alt_load+0xcc>
    86bc:	00000e06 	br	86f8 <alt_load+0xbc>
    86c0:	01400074 	movhi	r5,1
    86c4:	29600804 	addi	r5,r5,-32736
    86c8:	00bfff04 	movi	r2,-4
    86cc:	28cbc83a 	sub	r5,r5,r3
    86d0:	288a703a 	and	r5,r5,r2
    86d4:	0005883a 	mov	r2,zero
    86d8:	00000506 	br	86f0 <alt_load+0xb4>
    86dc:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    86e0:	39c00017 	ldw	r7,0(r7)
    86e4:	188d883a 	add	r6,r3,r2
    86e8:	10800104 	addi	r2,r2,4
    86ec:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    86f0:	117ffa1e 	bne	r2,r5,86dc <alt_load+0xa0>
    86f4:	003fec06 	br	86a8 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    86f8:	00088b80 	call	88b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    86fc:	dfc00017 	ldw	ra,0(sp)
    8700:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8704:	00088bc1 	jmpi	88bc <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    8708:	01400074 	movhi	r5,1
    870c:	2962a204 	addi	r5,r5,-30072
    8710:	00bfff04 	movi	r2,-4
    8714:	28cbc83a 	sub	r5,r5,r3
    8718:	288a703a 	and	r5,r5,r2
    871c:	0005883a 	mov	r2,zero
    8720:	00000506 	br	8738 <alt_load+0xfc>
    8724:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    8728:	39c00017 	ldw	r7,0(r7)
    872c:	188d883a 	add	r6,r3,r2
    8730:	10800104 	addi	r2,r2,4
    8734:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8738:	117ffa1e 	bne	r2,r5,8724 <alt_load+0xe8>
    873c:	003fee06 	br	86f8 <alt_load+0xbc>

00008740 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8740:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8744:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8748:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    874c:	00087d80 	call	87d8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8750:	00087f80 	call	87f8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8754:	d1204717 	ldw	r4,-32484(gp)
    8758:	d1604617 	ldw	r5,-32488(gp)
    875c:	d1a04517 	ldw	r6,-32492(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8760:	dfc00017 	ldw	ra,0(sp)
    8764:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8768:	00083081 	jmpi	8308 <main>

0000876c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    876c:	00088301 	jmpi	8830 <alt_busy_sleep>

00008770 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8770:	deffff04 	addi	sp,sp,-4
    8774:	dfc00015 	stw	ra,0(sp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8778:	00800044 	movi	r2,1
    877c:	20800226 	beq	r4,r2,8788 <write+0x18>
    8780:	00800084 	movi	r2,2
    8784:	2080061e 	bne	r4,r2,87a0 <write+0x30>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8788:	01000074 	movhi	r4,1
    878c:	2122de04 	addi	r4,r4,-29832
    8790:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    8794:	dfc00017 	ldw	ra,0(sp)
    8798:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    879c:	00087fc1 	jmpi	87fc <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    87a0:	00800074 	movhi	r2,1
    87a4:	10a2df04 	addi	r2,r2,-29828
    87a8:	10800017 	ldw	r2,0(r2)
    87ac:	10000226 	beq	r2,zero,87b8 <write+0x48>
    87b0:	103ee83a 	callr	r2
    87b4:	00000206 	br	87c0 <write+0x50>
    87b8:	00800074 	movhi	r2,1
    87bc:	10a31e04 	addi	r2,r2,-29576
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    87c0:	00c01444 	movi	r3,81
    87c4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    87c8:	00bfffc4 	movi	r2,-1
    87cc:	dfc00017 	ldw	ra,0(sp)
    87d0:	dec00104 	addi	sp,sp,4
    87d4:	f800283a 	ret

000087d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    87d8:	deffff04 	addi	sp,sp,-4
    87dc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, Nios);
    87e0:	00088c00 	call	88c0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    87e4:	00800044 	movi	r2,1
    87e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    87ec:	dfc00017 	ldw	ra,0(sp)
    87f0:	dec00104 	addi	sp,sp,4
    87f4:	f800283a 	ret

000087f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    87f8:	f800283a 	ret

000087fc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    87fc:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8800:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8804:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8808:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    880c:	00000606 	br	8828 <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8810:	31c00037 	ldwio	r7,0(r6)
    8814:	39ffffec 	andhi	r7,r7,65535
    8818:	383ffd26 	beq	r7,zero,8810 <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    881c:	29c00007 	ldb	r7,0(r5)
    8820:	29400044 	addi	r5,r5,1
    8824:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8828:	293ff936 	bltu	r5,r4,8810 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    882c:	f800283a 	ret

00008830 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8830:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8834:	014666b4 	movhi	r5,6554
    8838:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    883c:	dc000015 	stw	r16,0(sp)
    8840:	dfc00115 	stw	ra,4(sp)
    8844:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8848:	00089e80 	call	89e8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    884c:	10001026 	beq	r2,zero,8890 <alt_busy_sleep+0x60>
    8850:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8854:	01600034 	movhi	r5,32768
    8858:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    885c:	013999b4 	movhi	r4,58982
    8860:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8864:	297fffc4 	addi	r5,r5,-1
    8868:	283ffe1e 	bne	r5,zero,8864 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    886c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8870:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8874:	18bffb16 	blt	r3,r2,8864 <alt_busy_sleep+0x34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    8878:	8009883a 	mov	r4,r16
    887c:	01400144 	movi	r5,5
    8880:	00089f80 	call	89f8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8884:	10bfffc4 	addi	r2,r2,-1
    8888:	103ffe1e 	bne	r2,zero,8884 <alt_busy_sleep+0x54>
    888c:	00000506 	br	88a4 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    8890:	8009883a 	mov	r4,r16
    8894:	01400144 	movi	r5,5
    8898:	00089f80 	call	89f8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    889c:	10bfffc4 	addi	r2,r2,-1
    88a0:	00bffe16 	blt	zero,r2,889c <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    88a4:	0005883a 	mov	r2,zero
    88a8:	dfc00117 	ldw	ra,4(sp)
    88ac:	dc000017 	ldw	r16,0(sp)
    88b0:	dec00204 	addi	sp,sp,8
    88b4:	f800283a 	ret

000088b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    88b8:	f800283a 	ret

000088bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    88bc:	f800283a 	ret

000088c0 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    88c0:	000170fa 	wrctl	ienable,zero
    88c4:	f800283a 	ret

000088c8 <udivmodsi4>:
    88c8:	2005883a 	mov	r2,r4
    88cc:	2900182e 	bgeu	r5,r4,8930 <udivmodsi4+0x68>
    88d0:	28001716 	blt	r5,zero,8930 <udivmodsi4+0x68>
    88d4:	01000804 	movi	r4,32
    88d8:	00c00044 	movi	r3,1
    88dc:	00000206 	br	88e8 <udivmodsi4+0x20>
    88e0:	20001126 	beq	r4,zero,8928 <udivmodsi4+0x60>
    88e4:	28000516 	blt	r5,zero,88fc <udivmodsi4+0x34>
    88e8:	294b883a 	add	r5,r5,r5
    88ec:	213fffc4 	addi	r4,r4,-1
    88f0:	18c7883a 	add	r3,r3,r3
    88f4:	28bffa36 	bltu	r5,r2,88e0 <udivmodsi4+0x18>
    88f8:	18000b26 	beq	r3,zero,8928 <udivmodsi4+0x60>
    88fc:	0009883a 	mov	r4,zero
    8900:	11400236 	bltu	r2,r5,890c <udivmodsi4+0x44>
    8904:	1145c83a 	sub	r2,r2,r5
    8908:	20c8b03a 	or	r4,r4,r3
    890c:	1806d07a 	srli	r3,r3,1
    8910:	280ad07a 	srli	r5,r5,1
    8914:	183ffa1e 	bne	r3,zero,8900 <udivmodsi4+0x38>
    8918:	3000021e 	bne	r6,zero,8924 <udivmodsi4+0x5c>
    891c:	2005883a 	mov	r2,r4
    8920:	f800283a 	ret
    8924:	f800283a 	ret
    8928:	0009883a 	mov	r4,zero
    892c:	003ffa06 	br	8918 <udivmodsi4+0x50>
    8930:	00c00044 	movi	r3,1
    8934:	0009883a 	mov	r4,zero
    8938:	003ff106 	br	8900 <udivmodsi4+0x38>

0000893c <__divsi3>:
    893c:	defffe04 	addi	sp,sp,-8
    8940:	dfc00115 	stw	ra,4(sp)
    8944:	dc000015 	stw	r16,0(sp)
    8948:	20000a16 	blt	r4,zero,8974 <__divsi3+0x38>
    894c:	0021883a 	mov	r16,zero
    8950:	28000b16 	blt	r5,zero,8980 <__divsi3+0x44>
    8954:	000d883a 	mov	r6,zero
    8958:	00088c80 	call	88c8 <udivmodsi4>
    895c:	80000126 	beq	r16,zero,8964 <__divsi3+0x28>
    8960:	0085c83a 	sub	r2,zero,r2
    8964:	dfc00117 	ldw	ra,4(sp)
    8968:	dc000017 	ldw	r16,0(sp)
    896c:	dec00204 	addi	sp,sp,8
    8970:	f800283a 	ret
    8974:	0109c83a 	sub	r4,zero,r4
    8978:	04000044 	movi	r16,1
    897c:	283ff50e 	bge	r5,zero,8954 <__divsi3+0x18>
    8980:	014bc83a 	sub	r5,zero,r5
    8984:	8400005c 	xori	r16,r16,1
    8988:	003ff206 	br	8954 <__divsi3+0x18>

0000898c <__modsi3>:
    898c:	deffff04 	addi	sp,sp,-4
    8990:	dfc00015 	stw	ra,0(sp)
    8994:	20000516 	blt	r4,zero,89ac <__modsi3+0x20>
    8998:	28000c16 	blt	r5,zero,89cc <__modsi3+0x40>
    899c:	01800044 	movi	r6,1
    89a0:	dfc00017 	ldw	ra,0(sp)
    89a4:	dec00104 	addi	sp,sp,4
    89a8:	00088c81 	jmpi	88c8 <udivmodsi4>
    89ac:	0109c83a 	sub	r4,zero,r4
    89b0:	28000b16 	blt	r5,zero,89e0 <__modsi3+0x54>
    89b4:	01800044 	movi	r6,1
    89b8:	00088c80 	call	88c8 <udivmodsi4>
    89bc:	0085c83a 	sub	r2,zero,r2
    89c0:	dfc00017 	ldw	ra,0(sp)
    89c4:	dec00104 	addi	sp,sp,4
    89c8:	f800283a 	ret
    89cc:	014bc83a 	sub	r5,zero,r5
    89d0:	01800044 	movi	r6,1
    89d4:	dfc00017 	ldw	ra,0(sp)
    89d8:	dec00104 	addi	sp,sp,4
    89dc:	00088c81 	jmpi	88c8 <udivmodsi4>
    89e0:	014bc83a 	sub	r5,zero,r5
    89e4:	003ff306 	br	89b4 <__modsi3+0x28>

000089e8 <__udivsi3>:
    89e8:	000d883a 	mov	r6,zero
    89ec:	00088c81 	jmpi	88c8 <udivmodsi4>

000089f0 <__umodsi3>:
    89f0:	01800044 	movi	r6,1
    89f4:	00088c81 	jmpi	88c8 <udivmodsi4>

000089f8 <__mulsi3>:
    89f8:	0005883a 	mov	r2,zero
    89fc:	20000726 	beq	r4,zero,8a1c <__mulsi3+0x24>
    8a00:	20c0004c 	andi	r3,r4,1
    8a04:	2008d07a 	srli	r4,r4,1
    8a08:	18000126 	beq	r3,zero,8a10 <__mulsi3+0x18>
    8a0c:	1145883a 	add	r2,r2,r5
    8a10:	294b883a 	add	r5,r5,r5
    8a14:	203ffa1e 	bne	r4,zero,8a00 <__mulsi3+0x8>
    8a18:	f800283a 	ret
    8a1c:	f800283a 	ret
